{"version":3,"file":"maptiler-sdk.mjs","sources":["../src/config.ts","../src/language.ts","../src/style.ts","../src/defaults.ts","../src/CustomLogoControl.ts","../src/tools.ts","../src/Map.ts","../src/unit.ts"],"sourcesContent":["import { LanguageString } from \"./language\";\nimport { config as clientConfig, FetchFunction } from \"@maptiler/client\";\n\n/**\n * Configuration class for the SDK\n */\nclass SdkConfig {\n  /**\n   * If `true`, some more debuf text will show. Default: `false`\n   */\n  verbose = false;\n\n  /**\n   * The primary language, to overwrite the default language defined in the map style.\n   */\n  primaryLanguage: LanguageString | null = null;\n\n  /**\n   * The secondary language, to overwrite the default language defined in the map style.\n   * This settings is highly dependant on the style compatibility and may not work in most cases.\n   */\n  secondaryLanguage: LanguageString | null = null;\n\n  /**\n   * MapTiler Cloud API key\n   */\n  private _apiKey = \"Not defined yet.\";\n\n  /**\n   * Set the MapTiler Cloud API key\n   */\n  set apiKey(k: string) {\n    this._apiKey = k;\n    clientConfig.apiKey = k;\n  }\n\n  /**\n   * Get the MapTiler Cloud API key\n   */\n  get apiKey(): string {\n    return this._apiKey;\n  }\n\n  /**\n   * Set a the custom fetch function to replace the default one\n   */\n  set fetch(f: FetchFunction) {\n    clientConfig.fetch = f;\n  }\n\n  /**\n   * Get the fetch fucntion\n   */\n  get fetch(): FetchFunction | null {\n    return clientConfig.fetch;\n  }\n}\n\nconst config = new SdkConfig();\n\nexport { config, SdkConfig };\n","/**\n * Languages. Note that not all the languages of this list are available but the compatibility list may be expanded in the future.\n */\nconst Language = {\n  /**\n   * AUTO mode uses the language of the browser\n   */\n  AUTO: \"auto\",\n\n  /**\n   * Default fallback languages that uses latin charaters\n   */\n  LATIN: \"latin\",\n\n  /**\n   * Default fallback languages that uses non-latin charaters\n   */\n  NON_LATIN: \"nonlatin\",\n\n  /**\n   * Labels are in their local language, when available\n   */\n  LOCAL: \"\",\n\n  ALBANIAN: \"sq\",\n  AMHARIC: \"am\",\n  ARABIC: \"ar\",\n  ARMENIAN: \"hy\",\n  AZERBAIJANI: \"az\",\n  BASQUE: \"eu\",\n  BELORUSSIAN: \"be\",\n  BOSNIAN: \"bs\",\n  BRETON: \"br\",\n  BULGARIAN: \"bg\",\n  CATALAN: \"ca\",\n  CHINESE: \"zh\",\n  CORSICAN: \"co\",\n  CROATIAN: \"hr\",\n  CZECH: \"cs\",\n  DANISH: \"da\",\n  DUTCH: \"nl\",\n  ENGLISH: \"en\",\n  ESPERANTO: \"eo\",\n  ESTONIAN: \"et\",\n  FINNISH: \"fi\",\n  FRENCH: \"fr\",\n  FRISIAN: \"fy\",\n  GEORGIAN: \"ka\",\n  GERMAN: \"de\",\n  GREEK: \"el\",\n  HEBREW: \"he\",\n  HINDI: \"hi\",\n  HUNGARIAN: \"hu\",\n  ICELANDIC: \"is\",\n  INDONESIAN: \"id\",\n  IRISH: \"ga\",\n  ITALIAN: \"it\",\n  JAPANESE: \"ja\",\n  JAPANESE_HIRAGANA: \"ja-Hira\",\n  JAPANESE_KANA: \"ja_kana\",\n  JAPANESE_LATIN: \"ja_rm\",\n  JAPANESE_2018: \"ja-Latn\",\n  KANNADA: \"kn\",\n  KAZAKH: \"kk\",\n  KOREAN: \"ko\",\n  KOREAN_LATIN: \"ko-Latn\",\n  KURDISH: \"ku\",\n  ROMAN_LATIN: \"la\",\n  LATVIAN: \"lv\",\n  LITHUANIAN: \"lt\",\n  LUXEMBOURGISH: \"lb\",\n  MACEDONIAN: \"mk\",\n  MALAYALAM: \"ml\",\n  MALTESE: \"mt\",\n  NORWEGIAN: \"no\",\n  OCCITAN: \"oc\",\n  POLISH: \"pl\",\n  PORTUGUESE: \"pt\",\n  ROMANIA: \"ro\",\n  ROMANSH: \"rm\",\n  RUSSIAN: \"ru\",\n  SCOTTISH_GAELIC: \"gd\",\n  SERBIAN_CYRILLIC: \"sr\",\n  SERBIAN_LATIN: \"sr-Latn\",\n  SLOVAK: \"sk\",\n  SLOVENE: \"sl\",\n  SPANISH: \"es\",\n  SWEDISH: \"sv\",\n  TAMIL: \"ta\",\n  TELUGU: \"te\",\n  THAI: \"th\",\n  TURKISH: \"tr\",\n  UKRAINIAN: \"uk\",\n  WELSH: \"cy\",\n} as const;\n\nconst languageCodeSet = new Set(Object.values(Language));\n\nconsole.log(\"languageCodeSet\", languageCodeSet);\n\ntype Values<T> = T[keyof T];\n\n/**\n * Built-in languages values as strings\n */\ntype LanguageString = Values<typeof Language>;\n\nfunction getBrowserLanguage(): LanguageString {\n  if (typeof navigator === \"undefined\") {\n    return Language.LATIN;\n  }\n\n  const canditatelangs = Array.from(\n    new Set(navigator.languages.map((l) => l.split(\"-\")[0]))\n  ).filter((l) => languageCodeSet.has(l as LanguageString));\n\n  return canditatelangs.length\n    ? (canditatelangs[0] as LanguageString)\n    : Language.LATIN;\n}\n\nexport { Language, LanguageString, getBrowserLanguage };\n","import satelliteBuiltin from \"./builtinStyles/satellite.json\";\nimport { StyleSpecification } from \"maplibre-gl\";\n\n/**\n * Built-in styles\n */\nconst Style = {\n  STREETS: \"streets-v2\",\n  HYBRID: \"hybrid\",\n  SATELLITE: \"satellite\",\n  OUTDOOR: \"outdoor\",\n  BASIC: \"basic-v2\",\n  DARK: \"streets-v2-dark\",\n  LIGHT: \"streets-v2-light\",\n} as const;\n\ntype Values<T> = T[keyof T];\n\n/**\n * Built-in style values as strings\n */\ntype StyleString = Values<typeof Style>;\n\nconst builtInStyles = {};\nbuiltInStyles[Style.SATELLITE] = satelliteBuiltin;\n\nfunction isBuiltinStyle(styleId: string): boolean {\n  return styleId in builtInStyles;\n}\n\nfunction prepareBuiltinStyle(\n  styleId: StyleString,\n  apiKey: string\n): StyleSpecification | null {\n  if (!isBuiltinStyle(styleId)) {\n    return null;\n  }\n\n  const fullTextVersion = JSON.stringify(builtInStyles[styleId]).replace(\n    /{key}/gi,\n    apiKey\n  );\n  return JSON.parse(fullTextVersion) as StyleSpecification;\n}\n\nexport { Style, StyleString, isBuiltinStyle, prepareBuiltinStyle };\n","import { Language } from \"./language\";\nimport { Style } from \"./style\";\n\n/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  // When a Map is instanciated without a 'style', then this one is the default\n  mapStyle: Style.STREETS,\n  maptilerLogoURL: \"https://api.maptiler.com/resources/logo.svg\",\n  maptilerURL: \"https://www.maptiler.com/\",\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  rtlPluginURL:\n    \"https://cdn.maptiler.com/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.min.js\",\n  primaryLanguage: Language.LATIN,\n  secondaryLanguage: Language.NON_LATIN,\n  terrainSourceURL: \"https://api.maptiler.com/tiles/terrain-rgb/tiles.json\",\n  terrainSourceId: \"maptiler-terrain\",\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","import * as maplibre from \"maplibre-gl\";\nimport { defaults } from \"./defaults\";\nimport { Map } from \"./Map\";\n\ntype LogoOptions = maplibre.LogoOptions & {\n  logoURL?: string;\n  linkURL?: string;\n};\n\n/**\n * This LogoControl extends the MapLibre LogoControl but instead can use any image URL and\n * any link URL. By default this is using MapTiler logo and URL.\n */\nexport class CustomLogoControl extends maplibre.LogoControl {\n  private logoURL = \"\";\n  private linkURL = \"\";\n\n  constructor(options: LogoOptions = {}) {\n    super(options);\n\n    this.logoURL = options.logoURL ?? defaults.maptilerLogoURL;\n    this.linkURL = options.linkURL ?? defaults.maptilerURL;\n  }\n\n  onAdd(map: Map): HTMLElement {\n    this._map = map;\n    this._compact = this.options && this.options.compact;\n    this._container = window.document.createElement(\"div\");\n    this._container.className = \"maplibregl-ctrl\";\n    const anchor = window.document.createElement(\"a\");\n    anchor.style.backgroundRepeat = \"no-repeat\";\n    anchor.style.cursor = \"pointer\";\n    anchor.style.display = \"block\";\n    anchor.style.height = \"23px\";\n    anchor.style.margin = \"0 0 -4px -4px\";\n    anchor.style.overflow = \"hidden\";\n    anchor.style.width = \"88px\";\n    anchor.style.backgroundImage = `url(${this.logoURL})`;\n    anchor.style.backgroundSize = \"100px 30px\";\n    anchor.style.width = \"100px\";\n    anchor.style.height = \"30px\";\n\n    anchor.target = \"_blank\";\n    anchor.rel = \"noopener nofollow\";\n    anchor.href = this.linkURL;\n    anchor.setAttribute(\n      \"aria-label\",\n      this._map._getUIString(\"LogoControl.Title\")\n    );\n    anchor.setAttribute(\"rel\", \"noopener nofollow\");\n    this._container.appendChild(anchor);\n    this._container.style.display = \"block\";\n\n    this._map.on(\"resize\", this._updateCompact);\n    this._updateCompact();\n\n    return this._container;\n  }\n}\n","import * as maplibre from \"maplibre-gl\";\nimport { config } from \"./config\";\nimport { defaults } from \"./defaults\";\n\n/**\n * Prints on console only if 'verbose' mode from the config is set to true\n * @param args\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function vlog(...args: any[]) {\n  if (config.verbose) {\n    console.log(...args);\n  }\n}\n\n/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  let match;\n  const trimmed = style.trim();\n  let expandedStyle;\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    expandedStyle = trimmed;\n  } else if ((match = maptilerDomainRegex.exec(trimmed)) !== null) {\n    expandedStyle = `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  } else {\n    // The style could also possibly just be the name of the style without any URI style\n    expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n  }\n\n  // appending the token if necessary\n  if (!expandedStyle.includes(\"key=\")) {\n    expandedStyle = `${expandedStyle}?key=${config.apiKey}`;\n  }\n\n  return expandedStyle;\n}\n\nexport function enableRTL() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const maplibrePackage = maplibre as any;\n  if (maplibrePackage.getRTLTextPluginStatus() === \"unavailable\") {\n    maplibrePackage.setRTLTextPlugin(\n      defaults.rtlPluginURL,\n      null,\n      true // Lazy load the plugin\n    );\n  }\n}\n","import * as maplibre from \"maplibre-gl\";\nimport { config } from \"./config\";\nimport { defaults } from \"./defaults\";\nimport { CustomLogoControl } from \"./CustomLogoControl\";\nimport { enableRTL, expandMapStyle, vlog } from \"./tools\";\nimport { getBrowserLanguage, Language, LanguageString } from \"./language\";\nimport { isBuiltinStyle, prepareBuiltinStyle, StyleString } from \"./style\";\n\n// StyleSwapOptions is not exported by Maplibre, but we can redefine it (used for setStyle)\nexport type TransformStyleFunction = (\n  previous: maplibre.StyleSpecification,\n  next: maplibre.StyleSpecification\n) => maplibre.StyleSpecification;\n\nexport type StyleSwapOptions = {\n  diff?: boolean;\n  transformStyle?: TransformStyleFunction;\n};\n\n/**\n * Options to provide to the `Map` constructor\n */\nexport type MapOptions = Omit<maplibre.MapOptions, \"style\" | \"maplibreLogo\"> & {\n  /**\n   * Style of the map. Can be:\n   * - a full style URL (possibly with API key)\n   * - a shorthand with only the MapTIler style name (eg. `\"streets-v2\"`)\n   * - a longer form with the prefix `\"maptiler://\"` (eg. `\"maptiler://streets-v2\"`)\n   */\n  style?: string;\n\n  /**\n   * Shows the MapTiler logo if `true`. Note that the logo is always displayed on free plan.\n   */\n  maptilerLogo?: boolean;\n\n  /**\n   * Enables 3D terrain if `true`. (default: `false`)\n   */\n  enableTerrain?: boolean;\n\n  /**\n   * Exaggeration factor of the terrain. (default: `1`, no exaggeration)\n   */\n  terrainExaggeration?: number;\n};\n\n/**\n * The Map class can be instanciated to display a map in a `<div>`\n */\nexport class Map extends maplibre.Map {\n  private languageShouldUpdate = false;\n  private isStyleInitialized = false;\n  private isTerrainEnabled = false;\n  private terrainExaggeration = 1;\n\n  constructor(options: MapOptions) {\n    let style;\n\n    if (\"style\" in options) {\n      if (typeof style === \"string\" && isBuiltinStyle(style)) {\n        style = prepareBuiltinStyle(style as StyleString, config.apiKey);\n      } else if (typeof style === \"string\") {\n        style = expandMapStyle(style);\n      } else {\n        style = options.style;\n      }\n    } else {\n      style = expandMapStyle(defaults.mapStyle);\n      vlog(`Map style not provided, backing up to ${defaults.mapStyle}`);\n    }\n\n    // calling the map constructor with full length style\n    super({ ...options, style, maplibreLogo: false });\n\n    // Check if language has been modified and. If so, it will be updated during the next lifecycle step\n    this.on(\"styledataloading\", () => {\n      this.languageShouldUpdate =\n        !!config.primaryLanguage || !!config.secondaryLanguage;\n    });\n\n    // If the config includes language changing, we must update the map language\n    this.on(\"styledata\", () => {\n      if (\n        config.primaryLanguage &&\n        (this.languageShouldUpdate || !this.isStyleInitialized)\n      ) {\n        this.setPrimaryLanguage(config.primaryLanguage);\n      }\n\n      if (\n        config.secondaryLanguage &&\n        (this.languageShouldUpdate || !this.isStyleInitialized)\n      ) {\n        this.setSecondaryLanguage(config.secondaryLanguage);\n      }\n\n      this.languageShouldUpdate = false;\n      this.isStyleInitialized = true;\n    });\n\n    // this even is in charge of reaplying the terrain elevation after the\n    // style has changed because depending on the src/tgt style,\n    // the style logic is not always able to resolve the application of terrain\n    this.on(\"styledata\", () => {\n      // the styling resolver did no manage to reaply the terrain,\n      // so let's reload it\n      if (this.getTerrain() === null && this.isTerrainEnabled) {\n        this.enableTerrain(this.terrainExaggeration);\n      }\n    });\n\n    // load the Right-to-Left text plugin (will happen only once)\n    this.once(\"load\", async () => {\n      enableRTL();\n    });\n\n    // Update logo and attibution\n    this.once(\"load\", async () => {\n      let tileJsonURL = null;\n      try {\n        tileJsonURL = (\n          this.getSource(\"openmaptiles\") as maplibre.VectorTileSource\n        ).url;\n      } catch (e) {\n        return;\n      }\n\n      const tileJsonRes = await fetch(tileJsonURL);\n      const tileJsonContent = await tileJsonRes.json();\n\n      // The attribution and logo must show when required\n      if (\"logo\" in tileJsonContent && tileJsonContent.logo) {\n        const logoURL: string = tileJsonContent.logo;\n\n        this.addControl(\n          new CustomLogoControl({ logoURL }),\n          options.logoPosition\n        );\n\n        // if attribution in option is `false` but the the logo shows up in the tileJson, then the attribution must show anyways\n        if (options.attributionControl === false) {\n          this.addControl(new maplibre.AttributionControl(options));\n        }\n      } else if (options.maptilerLogo) {\n        this.addControl(new CustomLogoControl(), options.logoPosition);\n      }\n    });\n\n    // enable 3D terrain if provided in options\n    if (options.enableTerrain) {\n      this.enableTerrain(options.terrainExaggeration ?? 1);\n    }\n  }\n\n  /**\n   * Update the style of the map.\n   * Can be:\n   * - a full style URL (possibly with API key)\n   * - a shorthand with only the MapTIler style name (eg. `\"streets-v2\"`)\n   * - a longer form with the prefix `\"maptiler://\"` (eg. `\"maptiler://streets-v2\"`)\n   * @param style\n   * @param options\n   * @returns\n   */\n  setStyle(\n    style: maplibre.StyleSpecification | string | null,\n    options?: StyleSwapOptions & maplibre.StyleOptions\n  ) {\n    let tempStyle = style;\n\n    if (typeof style === \"string\" && isBuiltinStyle(style)) {\n      tempStyle = prepareBuiltinStyle(style as StyleString, config.apiKey);\n    } else if (typeof style === \"string\") {\n      tempStyle = expandMapStyle(style);\n    }\n\n    return super.setStyle(tempStyle, options);\n  }\n\n  /**\n   * Define the primary language of the map. Note that not all the languages shorthands provided are available.\n   * This function is a short for `.setPrimaryLanguage()`\n   * @param language\n   */\n  setLanguage(language: LanguageString = defaults.primaryLanguage) {\n    if (language === Language.AUTO) {\n      return this.setLanguage(getBrowserLanguage());\n    }\n    this.setPrimaryLanguage(language);\n  }\n\n  /**\n   * Define the primary language of the map. Note that not all the languages shorthands provided are available.\n   * @param language\n   */\n  setPrimaryLanguage(language: LanguageString = defaults.primaryLanguage) {\n    if (language === Language.AUTO) {\n      return this.setPrimaryLanguage(getBrowserLanguage());\n    }\n\n    console.log(\"language\", language);\n\n    // We want to keep track of it to apply the language again when changing the style\n    config.primaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*(:\\s*(\\S*))?\\s*$/;\n\n    // for string based bilingual lang such as \"{name:latin}  {name:nonlatin}\" or \"{name:latin}  {name}\"\n    const strBilingualRegex =\n      /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}(\\s*){\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // Regex to capture when there are more info, such as mountains elevation with unit m/ft\n    const strMoreInfoRegex = /^(.*)({\\s*name\\s*(:\\s*(\\S*))?\\s*})(.*)$/;\n\n    const langStr = language ? `name:${language}` : \"name\"; // to handle local lang\n    const replacer = [\n      \"case\",\n      [\"has\", langStr],\n      [\"get\", langStr],\n      [\"get\", \"name:latin\"],\n    ];\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout[\"text-field\"]) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(\n        layer.id,\n        \"text-field\"\n      );\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      //\n      // The case 1, 2 and 3 will be updated while maintaining their original type and shape.\n      // The case 3 will not be updated\n\n      let regexMatch;\n\n      // This is case 1\n      if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"concat\"\n      ) {\n        const newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if (\n            (typeof elem === \"string\" || elem instanceof String) &&\n            strLanguageRegex.exec(elem.toString())\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          }\n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          else if (\n            Array.isArray(elem) &&\n            elem.length >= 2 &&\n            elem[0].trim().toLowerCase() === \"get\" &&\n            strLanguageInArrayRegex.exec(elem[1].toString())\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          } else if (\n            Array.isArray(elem) &&\n            elem.length === 4 &&\n            elem[0].trim().toLowerCase() === \"case\"\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          }\n        }\n\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // This is case 2\n      else if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"get\" &&\n        strLanguageInArrayRegex.exec(textFieldLayoutProp[1].toString())\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // This is case 3\n      else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        strLanguageRegex.exec(textFieldLayoutProp.toString())\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length === 4 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"case\"\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strBilingualRegex.exec(\n          textFieldLayoutProp.toString()\n        )) !== null\n      ) {\n        const newProp = `{${langStr}}${regexMatch[3]}{name${\n          regexMatch[4] || \"\"\n        }}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strMoreInfoRegex.exec(textFieldLayoutProp.toString())) !==\n          null\n      ) {\n        const newProp = `${regexMatch[1]}{${langStr}}${regexMatch[5]}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n    }\n  }\n\n  /**\n   * Define the secondary language of the map.\n   * Note that most styles do not allow a secondary language and this function only works if the style allows (no force adding)\n   * @param language\n   */\n  setSecondaryLanguage(language: LanguageString = defaults.secondaryLanguage) {\n    if (language === Language.AUTO) {\n      return this.setSecondaryLanguage(getBrowserLanguage());\n    }\n\n    // We want to keep track of it to apply the language again when changing the style\n    config.secondaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*(:\\s*(\\S*))?\\s*$/;\n\n    // for string based bilingual lang such as \"{name:latin}  {name:nonlatin}\" or \"{name:latin}  {name}\"\n    const strBilingualRegex =\n      /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}(\\s*){\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    let regexMatch;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout[\"text-field\"]) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(\n        layer.id,\n        \"text-field\"\n      );\n\n      let newProp;\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      //\n      // Only the case 1 will be updated because we don't want to change the styling (read: add a secondary language where the original styling is only displaying 1)\n\n      // This is case 1\n      if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"concat\"\n      ) {\n        newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        let languagesAlreadyFound = 0;\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if (\n            (typeof elem === \"string\" || elem instanceof String) &&\n            strLanguageRegex.exec(elem.toString())\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j] = `{name:${language}}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          }\n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          else if (\n            Array.isArray(elem) &&\n            elem.length >= 2 &&\n            elem[0].trim().toLowerCase() === \"get\" &&\n            strLanguageInArrayRegex.exec(elem[1].toString())\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j][1] = `name:${language}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          } else if (\n            Array.isArray(elem) &&\n            elem.length === 4 &&\n            elem[0].trim().toLowerCase() === \"case\"\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j] = [\"get\", `name:${language}`]; // the situation with 'case' is supposed to only happen with the primary lang\n              break; // but in case a styling also does that for secondary...\n            }\n\n            languagesAlreadyFound += 1;\n          }\n        }\n\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // the language (both first and second) are defined into a single string model\n      else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strBilingualRegex.exec(\n          textFieldLayoutProp.toString()\n        )) !== null\n      ) {\n        const langStr = language ? `name:${language}` : \"name\"; // to handle local lang\n        newProp = `{name${regexMatch[1] || \"\"}}${regexMatch[3]}{${langStr}}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n    }\n  }\n\n  /**\n   * Enables the 3D terrain visualization\n   * @param exaggeration\n   * @returns\n   */\n  enableTerrain(exaggeration = 1) {\n    const terrainInfo = this.getTerrain();\n\n    const addTerrain = () => {\n      // When style is changed,\n      this.isTerrainEnabled = true;\n      this.terrainExaggeration = exaggeration;\n\n      this.addSource(defaults.terrainSourceId, {\n        type: \"raster-dem\",\n        url: `${defaults.terrainSourceURL}?key=${config.apiKey}`,\n      });\n      this.setTerrain({\n        source: defaults.terrainSourceId,\n        exaggeration: exaggeration,\n      });\n    };\n\n    // The terrain has already been loaded,\n    // we just update the exaggeration.\n    if (terrainInfo) {\n      this.setTerrain({ ...terrainInfo, exaggeration });\n      return;\n    }\n\n    if (this.loaded() || this.isTerrainEnabled) {\n      addTerrain();\n    } else {\n      this.once(\"load\", () => {\n        if (this.getTerrain() && this.getSource(defaults.terrainSourceId)) {\n          return;\n        }\n        addTerrain();\n      });\n    }\n  }\n\n  /**\n   * Disable the 3D terrain visualization\n   */\n  disableTerrain() {\n    this.isTerrainEnabled = false;\n    this.setTerrain(null);\n    if (this.getSource(defaults.terrainSourceId)) {\n      this.removeSource(defaults.terrainSourceId);\n    }\n  }\n\n  /**\n   * Sets the 3D terrain exageration factor.\n   * Note: this is only a shortcut to `.enableTerrain()`\n   * @param exaggeration\n   */\n  setTerrainExaggeration(exaggeration: number) {\n    this.enableTerrain(exaggeration);\n  }\n\n  // getLanguages() {\n  //   const layers = this.getStyle().layers;\n\n  //   for (let i = 0; i < layers.length; i += 1) {\n  //     const layer = layers[i];\n  //     const layout = layer.layout;\n\n  //     if (!layout) {\n  //       continue;\n  //     }\n\n  //     if (!layout[\"text-field\"]) {\n  //       continue;\n  //     }\n\n  //     const textFieldLayoutProp = this.getLayoutProperty(\n  //       layer.id,\n  //       \"text-field\"\n  //     );\n  //   }\n  // }\n}\n","enum Unit {\n  METRIC,\n  IMPERIAL,\n}\n\nexport { Unit };\n"],"names":["clientConfig","Unit"],"mappings":"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"}