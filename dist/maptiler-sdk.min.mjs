import*as d from"maplibre-gl";export*from"maplibre-gl";import{config as E}from"@maptiler/client";import{ServiceError as st,coordinates as nt,data as ot,geocoding as lt,geolocation as gt,staticMaps as ct}from"@maptiler/client";class O{constructor(){this.verbose=!1,this.primaryLanguage=null,this.secondaryLanguage=null,this._apiKey="Not defined yet."}set apiKey(e){this._apiKey=e,E.apiKey=e}get apiKey(){return this._apiKey}set fetch(e){E.fetch=e}get fetch(){return E.fetch}}const c=new O;var L=(t=>(t.LATIN="latin",t.NON_LATIN="nonlatin",t.LOCAL="",t.AFAR="aa",t.ABKHAZIAN="ab",t.AVESTAN="ae",t.AFRIKAANS="af",t.AKAN="ak",t.AMHARIC="am",t.ARAGONESE="an",t.ARABIC="ar",t.ASSAMESE="as",t.AVARIC="av",t.AYMARA="ay",t.AZERBAIJANI="az",t.BASHKIR="ba",t.BELARUSIAN="be",t.BULGARIAN="bg",t.BIHARI="bh",t.BISLAMA="bi",t.BAMBARA="bm",t.BENGALI="bn",t.TIBETAN="bo",t.BRETON="br",t.BOSNIAN="bs",t.CATALAN="ca",t.CHECHEN="ce",t.CHAMORRO="ch",t.CORSICAN="co",t.CREE="cr",t.CZECH="cs",t.CHURCH_SLAVIC="cu",t.CHUVASH="cv",t.WELSH="cy",t.DANISH="da",t.GERMAN="de",t.MALDIVIAN="dv",t.DZONGKHA="dz",t.EWE="ee",t.GREEK="el",t.ENGLISH="en",t.ESPERANTO="eo",t.SPANISH="es",t.ESTONIAN="et",t.BASQUE="eu",t.PERSIAN="fa",t.FULAH="ff",t.FINNISH="fi",t.FIJIAN="fj",t.FAROESE="fo",t.FRENCH="fr",t.WESTERN_FRISIAN="fy",t.IRISH="ga",t.GAELIC="gd",t.GALICIAN="gl",t.GUARANI="gn",t.GUJARATI="gu",t.MANX="gv",t.HAUSA="ha",t.HEBREW="he",t.HINDI="hi",t.HIRI_MOTU="ho",t.CROATIAN="hr",t.HAITIAN="ht",t.HUNGARIAN="hu",t.ARMENIAN="hy",t.HERERO="hz",t.INTERLINGUA="ia",t.INDONESIAN="id",t.INTERLINGUE="ie",t.IGBO="ig",t.SICHUAN_YI="ii",t.INUPIAQ="ik",t.IDO="io",t.ICELANDIC="is",t.ITALIAN="it",t.INUKTITUT="iu",t.JAPANESE="ja",t.JAVANESE="jv",t.GEORGIAN="ka",t.KONGO="kg",t.KIKUYU="ki",t.KUANYAMA="kj",t.KAZAKH="kk",t.KALAALLISUT="kl",t.CENTRAL_KHMER="km",t.KANNADA="kn",t.KOREAN="ko",t.KANURI="kr",t.KASHMIRI="ks",t.KURDISH="ku",t.KOMI="kv",t.CORNISH="kw",t.KIRGHIZ="ky",t.LUXEMBOURGISH="lb",t.GANDA="lg",t.LIMBURGAN="li",t.LINGALA="ln",t.LAO="lo",t.LITHUANIAN="lt",t.LUBA_KATANGA="lu",t.LATVIAN="lv",t.MALAGASY="mg",t.MARSHALLESE="mh",t.MAORI="mi",t.MACEDONIAN="mk",t.MALAYALAM="ml",t.MONGOLIAN="mn",t.MARATHI="mr",t.MALAY="ms",t.MALTESE="mt",t.BURMESE="my",t.NAURU="na",t.NORWEGIAN="no",t.NORTH_NDEBELE="nd",t.NEPALI="ne",t.NDONGA="ng",t.DUTCH="nl",t.SOUTH_NDEBELE="nr",t.NAVAJO="nv",t.CHICHEWA="ny",t.OCCITAN="oc",t.OJIBWA="oj",t.OROMO="om",t.ORIYA="or",t.OSSETIC="os",t.PANJABI="pa",t.PALI="pi",t.POLISH="pl",t.PUSHTO="ps",t.PORTUGUESE="pt",t.QUECHUA="qu",t.ROMANSH="rm",t.RUNDI="rn",t.ROMANIAN="ro",t.RUSSIAN="ru",t.KINYARWANDA="rw",t.SANSKRIT="sa",t.SARDINIAN="sc",t.SINDHI="sd",t.NORTHERN_SAMI="se",t.SANGO="sg",t.SINHALA="si",t.SLOVAK="sk",t.SLOVENIAN="sl",t.SAMOAN="sm",t.SHONA="sn",t.SOMALI="so",t.ALBANIAN="sq",t.SERBIAN="sr",t.SWATI="ss",t.SOTHO_SOUTHERN="st",t.SUNDANESE="su",t.SWEDISH="sv",t.SWAHILI="sw",t.TAMIL="ta",t.TELUGU="te",t.TAJIK="tg",t.THAI="th",t.TIGRINYA="ti",t.TURKMEN="tk",t.TAGALOG="tl",t.TSWANA="tn",t.TONGA="to",t.TURKISH="tr",t.TSONGA="ts",t.TATAR="tt",t.TWI="tw",t.TAHITIAN="ty",t.UIGHUR="ug",t.UKRAINIAN="uk",t.URDU="ur",t.UZBEK="uz",t.VENDA="ve",t.VIETNAMESE="vi",t.VOLAPUK="vo",t.WALLOON="wa",t.WOLOF="wo",t.XHOSA="xh",t.YIDDISH="yi",t.YORUBA="yo",t.ZHUANG="za",t.CHINESE="zh",t.ZULU="zu",t))(L||{}),w=8,K="f0e4ff8c-a9e4-414e-9f4d-7938762c948f",P="Satellite no label",G={satellite:{url:"https://api.maptiler.com/tiles/satellite-v2/tiles.json?key={key}",tileSize:512,type:"raster"},maptiler_attribution:{attribution:'<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',type:"vector"}},$=[{id:"satellite",type:"raster",source:"satellite",minzoom:0,layout:{visibility:"visible"},paint:{"raster-opacity":1},filter:["all"]}],B={"maptiler:copyright":"This style was generated on MapTiler Cloud. Usage outside of MapTiler Cloud or MapTiler Server requires valid MapTiler Data package: https://www.maptiler.com/data/ -- please contact us."},_="https://api.maptiler.com/fonts/{fontstack}/{range}.pbf?key={key}",D=0,j=0,z=[-78.55323097748868,24.03141891413972],W=5.066147709178387,V={version:w,id:K,name:P,sources:G,layers:$,metadata:B,glyphs:_,bearing:D,pitch:j,center:z,zoom:W},R=(t=>(t.STREETS="streets-v2",t.HYBRID="hybrid",t.SATELLITE="satellite",t.OUTDOOR="outdoor",t.BASIC="basic-v2",t.DARK="streets-v2-dark",t.LIGHT="streets-v2-light",t))(R||{});const f={};f.satellite=V;function T(t){return t in f}function b(t,e){if(!T(t))return null;const r=JSON.stringify(f[t]).replace(/{key}/gi,e);return JSON.parse(r)}const g={mapStyle:R.STREETS,maptilerLogoURL:"https://api.maptiler.com/resources/logo.svg",maptilerURL:"https://www.maptiler.com/",maptilerApiURL:"https://api.maptiler.com/",rtlPluginURL:"https://cdn.maptiler.com/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.min.js",primaryLanguage:L.LATIN,secondaryLanguage:L.NON_LATIN,terrainSourceURL:"https://api.maptiler.com/tiles/terrain-rgb/tiles.json",terrainSourceId:"maptiler-terrain"};Object.freeze(g);class v extends d.LogoControl{constructor(e={}){var r,a;super(e),this.logoURL="",this.linkURL="",this.logoURL=(r=e.logoURL)!=null?r:g.maptilerLogoURL,this.linkURL=(a=e.linkURL)!=null?a:g.maptilerURL}onAdd(e){this._map=e,this._compact=this.options&&this.options.compact,this._container=window.document.createElement("div"),this._container.className="maplibregl-ctrl";const r=window.document.createElement("a");return r.style.backgroundRepeat="no-repeat",r.style.cursor="pointer",r.style.display="block",r.style.height="23px",r.style.margin="0 0 -4px -4px",r.style.overflow="hidden",r.style.width="88px",r.style.backgroundImage=`url(${this.logoURL})`,r.style.backgroundSize="100px 30px",r.style.width="100px",r.style.height="30px",r.target="_blank",r.rel="noopener nofollow",r.href=this.linkURL,r.setAttribute("aria-label",this._map._getUIString("LogoControl.Title")),r.setAttribute("rel","noopener nofollow"),this._container.appendChild(r),this._container.style.display="block",this._map.on("resize",this._updateCompact),this._updateCompact(),this._container}}function Y(...t){c.verbose&&console.log(...t)}function U(t){const e=/^maptiler:\/\/(.*)/;let r;const a=t.trim();let o;return a.startsWith("http://")||a.startsWith("https://")?o=a:(r=e.exec(a))!==null?o=`https://api.maptiler.com/maps/${r[1]}/style.json`:o=`https://api.maptiler.com/maps/${a}/style.json`,o.includes("key=")||(o=`${o}?key=${c.apiKey}`),o}function J(){const t=d;t.getRTLTextPluginStatus()==="unavailable"&&t.setRTLTextPlugin(g.rtlPluginURL,null,!0)}var F=Object.defineProperty,Z=Object.defineProperties,q=Object.getOwnPropertyDescriptors,H=Object.getOwnPropertySymbols,Q=Object.prototype.hasOwnProperty,X=Object.prototype.propertyIsEnumerable,C=(t,e,r)=>e in t?F(t,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):t[e]=r,k=(t,e)=>{for(var r in e||(e={}))Q.call(e,r)&&C(t,r,e[r]);if(H)for(var r of H(e))X.call(e,r)&&C(t,r,e[r]);return t},x=(t,e)=>Z(t,q(e)),M=(t,e,r)=>new Promise((a,o)=>{var m=n=>{try{y(r.next(n))}catch(u){o(u)}},h=n=>{try{y(r.throw(n))}catch(u){o(u)}},y=n=>n.done?a(n.value):Promise.resolve(n.value).then(m,h);y((r=r.apply(t,e)).next())});class tt extends d.Map{constructor(e){var r;let a;"style"in e?typeof a=="string"&&T(a)?a=b(a,c.apiKey):typeof a=="string"?a=U(a):a=e.style:(a=U(g.mapStyle),Y(`Map style not provided, backing up to ${g.mapStyle}`)),super(x(k({},e),{style:a,maplibreLogo:!1})),this.languageShouldUpdate=!1,this.isStyleInitialized=!1,this.isTerrainEnabled=!1,this.terrainExaggeration=1,this.on("styledataloading",()=>{this.languageShouldUpdate=!!c.primaryLanguage||!!c.secondaryLanguage}),this.on("styledata",()=>{c.primaryLanguage&&(this.languageShouldUpdate||!this.isStyleInitialized)&&this.setPrimaryLanguage(c.primaryLanguage),c.secondaryLanguage&&(this.languageShouldUpdate||!this.isStyleInitialized)&&this.setSecondaryLanguage(c.secondaryLanguage),this.languageShouldUpdate=!1,this.isStyleInitialized=!0}),this.on("styledata",()=>{this.getTerrain()===null&&this.isTerrainEnabled&&this.enableTerrain(this.terrainExaggeration)}),this.once("load",()=>M(this,null,function*(){J()})),this.once("load",()=>M(this,null,function*(){let o=null;try{o=this.getSource("openmaptiles").url}catch{return}const m=yield(yield fetch(o)).json();if("logo"in m&&m.logo){const h=m.logo;this.addControl(new v({logoURL:h}),e.logoPosition),e.attributionControl===!1&&this.addControl(new d.AttributionControl(e))}else e.maptilerLogo&&this.addControl(new v,e.logoPosition)})),e.enableTerrain&&this.enableTerrain((r=e.terrainExaggeration)!=null?r:1)}setStyle(e,r){let a=e;return typeof e=="string"&&T(e)?a=b(e,c.apiKey):typeof e=="string"&&(a=U(e)),super.setStyle(a,r)}setLanguage(e=g.primaryLanguage){this.setPrimaryLanguage(e)}setPrimaryLanguage(e=g.primaryLanguage){c.primaryLanguage=e;const r=this.getStyle().layers,a=/^\s*{\s*name\s*(:\s*(\S*))?\s*}$/,o=/^\s*name\s*(:\s*(\S*))?\s*$/,m=/^\s*{\s*name\s*(:\s*(\S*))?\s*}(\s*){\s*name\s*(:\s*(\S*))?\s*}$/,h=/^(.*)({\s*name\s*(:\s*(\S*))?\s*})(.*)$/,y=e?`name:${e}`:"name",n=["case",["has",y],["get",y],["get","name:latin"]];for(let u=0;u<r.length;u+=1){const l=r[u],S=l.layout;if(!S||!S["text-field"])continue;const i=this.getLayoutProperty(l.id,"text-field");let p;if(Array.isArray(i)&&i.length>=2&&i[0].trim().toLowerCase()==="concat"){const s=i.slice();for(let N=0;N<i.length;N+=1){const I=i[N];if((typeof I=="string"||I instanceof String)&&a.exec(I.toString())){s[N]=n;break}else if(Array.isArray(I)&&I.length>=2&&I[0].trim().toLowerCase()==="get"&&o.exec(I[1].toString())){s[N]=n;break}else if(Array.isArray(I)&&I.length===4&&I[0].trim().toLowerCase()==="case"){s[N]=n;break}}this.setLayoutProperty(l.id,"text-field",s)}else if(Array.isArray(i)&&i.length>=2&&i[0].trim().toLowerCase()==="get"&&o.exec(i[1].toString())){const s=n;this.setLayoutProperty(l.id,"text-field",s)}else if((typeof i=="string"||i instanceof String)&&a.exec(i.toString())){const s=n;this.setLayoutProperty(l.id,"text-field",s)}else if(Array.isArray(i)&&i.length===4&&i[0].trim().toLowerCase()==="case"){const s=n;this.setLayoutProperty(l.id,"text-field",s)}else if((typeof i=="string"||i instanceof String)&&(p=m.exec(i.toString()))!==null){const s=`{${y}}${p[3]}{name${p[4]||""}}`;this.setLayoutProperty(l.id,"text-field",s)}else if((typeof i=="string"||i instanceof String)&&(p=h.exec(i.toString()))!==null){const s=`${p[1]}{${y}}${p[5]}`;this.setLayoutProperty(l.id,"text-field",s)}}}setSecondaryLanguage(e=g.secondaryLanguage){c.secondaryLanguage=e;const r=this.getStyle().layers,a=/^\s*{\s*name\s*(:\s*(\S*))?\s*}$/,o=/^\s*name\s*(:\s*(\S*))?\s*$/,m=/^\s*{\s*name\s*(:\s*(\S*))?\s*}(\s*){\s*name\s*(:\s*(\S*))?\s*}$/;let h;for(let y=0;y<r.length;y+=1){const n=r[y],u=n.layout;if(!u||!u["text-field"])continue;const l=this.getLayoutProperty(n.id,"text-field");let S;if(Array.isArray(l)&&l.length>=2&&l[0].trim().toLowerCase()==="concat"){S=l.slice();let i=0;for(let p=0;p<l.length;p+=1){const s=l[p];if((typeof s=="string"||s instanceof String)&&a.exec(s.toString())){if(i===1){S[p]=`{name:${e}}`;break}i+=1}else if(Array.isArray(s)&&s.length>=2&&s[0].trim().toLowerCase()==="get"&&o.exec(s[1].toString())){if(i===1){S[p][1]=`name:${e}`;break}i+=1}else if(Array.isArray(s)&&s.length===4&&s[0].trim().toLowerCase()==="case"){if(i===1){S[p]=["get",`name:${e}`];break}i+=1}}this.setLayoutProperty(n.id,"text-field",S)}else if((typeof l=="string"||l instanceof String)&&(h=m.exec(l.toString()))!==null){const i=e?`name:${e}`:"name";S=`{name${h[1]||""}}${h[3]}{${i}}`,this.setLayoutProperty(n.id,"text-field",S)}}}enableTerrain(e=1){const r=this.getTerrain(),a=()=>{this.isTerrainEnabled=!0,this.terrainExaggeration=e,this.addSource(g.terrainSourceId,{type:"raster-dem",url:`${g.terrainSourceURL}?key=${c.apiKey}`}),this.setTerrain({source:g.terrainSourceId,exaggeration:e})};if(r){this.setTerrain(x(k({},r),{exaggeration:e}));return}this.loaded()||this.isTerrainEnabled?a():this.once("load",()=>{this.getTerrain()&&this.getSource(g.terrainSourceId)||a()})}disableTerrain(){this.isTerrainEnabled=!1,this.setTerrain(null),this.getSource(g.terrainSourceId)&&this.removeSource(g.terrainSourceId)}setTerrainExaggeration(e){this.enableTerrain(e)}}var A=(t=>(t[t.METRIC=0]="METRIC",t[t.IMPERIAL=1]="IMPERIAL",t))(A||{});export{L as Language,tt as Map,O as SdkConfig,st as ServiceError,R as Style,A as Unit,c as config,nt as coordinates,ot as data,lt as geocoding,gt as geolocation,ct as staticMaps};
