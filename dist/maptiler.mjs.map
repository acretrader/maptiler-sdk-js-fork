{"version":3,"file":"maptiler.mjs","sources":["../src/config.ts","../src/languages.ts","../src/defaults.ts","../src/CustomLogoControl.ts","../src/tools.ts","../src/Map.ts","../src/services/ServiceError.ts","../src/services/geocoder.ts","../src/services/geolocation.ts","../src/services/coordinates.ts","../src/services/data.ts","../src/simplify.ts","../src/services/staticMaps.ts","../src/units.ts"],"sourcesContent":["export interface Config {\n  apiToken: string;\n  verbose: boolean;\n  primaryLanguage: string | null;\n  secondaryLanguage: string | null;\n}\n\nconst config: Config = {\n  apiToken: \"Not defined yet.\",\n  verbose: false,\n  primaryLanguage: null,\n  secondaryLanguage: null,\n};\n\nexport { config };\n","enum languages {\n  LATIN = \"latin\",\n  NON_LATIN = \"nonlatin\",\n  LOCAL = \"\",\n  AFAR = \"aa\",\n  ABKHAZIAN = \"ab\",\n  AVESTAN = \"ae\",\n  AFRIKAANS = \"af\",\n  AKAN = \"ak\",\n  AMHARIC = \"am\",\n  ARAGONESE = \"an\",\n  ARABIC = \"ar\",\n  ASSAMESE = \"as\",\n  AVARIC = \"av\",\n  AYMARA = \"ay\",\n  AZERBAIJANI = \"az\",\n  BASHKIR = \"ba\",\n  BELARUSIAN = \"be\",\n  BULGARIAN = \"bg\",\n  BIHARI = \"bh\",\n  BISLAMA = \"bi\",\n  BAMBARA = \"bm\",\n  BENGALI = \"bn\",\n  TIBETAN = \"bo\",\n  BRETON = \"br\",\n  BOSNIAN = \"bs\",\n  CATALAN = \"ca\",\n  CHECHEN = \"ce\",\n  CHAMORRO = \"ch\",\n  CORSICAN = \"co\",\n  CREE = \"cr\",\n  CZECH = \"cs\",\n  CHURCH_SLAVIC = \"cu\",\n  CHUVASH = \"cv\",\n  WELSH = \"cy\",\n  DANISH = \"da\",\n  GERMAN = \"de\",\n  MALDIVIAN = \"dv\",\n  DZONGKHA = \"dz\",\n  EWE = \"ee\",\n  GREEK = \"el\",\n  ENGLISH = \"en\",\n  ESPERANTO = \"eo\",\n  SPANISH = \"es\",\n  ESTONIAN = \"et\",\n  BASQUE = \"eu\",\n  PERSIAN = \"fa\",\n  FULAH = \"ff\",\n  FINNISH = \"fi\",\n  FIJIAN = \"fj\",\n  FAROESE = \"fo\",\n  FRENCH = \"fr\",\n  WESTERN_FRISIAN = \"fy\",\n  IRISH = \"ga\",\n  GAELIC = \"gd\",\n  GALICIAN = \"gl\",\n  GUARANI = \"gn\",\n  GUJARATI = \"gu\",\n  MANX = \"gv\",\n  HAUSA = \"ha\",\n  HEBREW = \"he\",\n  HINDI = \"hi\",\n  HIRI_MOTU = \"ho\",\n  CROATIAN = \"hr\",\n  HAITIAN = \"ht\",\n  HUNGARIAN = \"hu\",\n  ARMENIAN = \"hy\",\n  HERERO = \"hz\",\n  INTERLINGUA = \"ia\",\n  INDONESIAN = \"id\",\n  INTERLINGUE = \"ie\",\n  IGBO = \"ig\",\n  SICHUAN_YI = \"ii\",\n  INUPIAQ = \"ik\",\n  IDO = \"io\",\n  ICELANDIC = \"is\",\n  ITALIAN = \"it\",\n  INUKTITUT = \"iu\",\n  JAPANESE = \"ja\",\n  JAVANESE = \"jv\",\n  GEORGIAN = \"ka\",\n  KONGO = \"kg\",\n  KIKUYU = \"ki\",\n  KUANYAMA = \"kj\",\n  KAZAKH = \"kk\",\n  KALAALLISUT = \"kl\",\n  CENTRAL_KHMER = \"km\",\n  KANNADA = \"kn\",\n  KOREAN = \"ko\",\n  KANURI = \"kr\",\n  KASHMIRI = \"ks\",\n  KURDISH = \"ku\",\n  KOMI = \"kv\",\n  CORNISH = \"kw\",\n  KIRGHIZ = \"ky\",\n  LUXEMBOURGISH = \"lb\",\n  GANDA = \"lg\",\n  LIMBURGAN = \"li\",\n  LINGALA = \"ln\",\n  LAO = \"lo\",\n  LITHUANIAN = \"lt\",\n  LUBA_KATANGA = \"lu\",\n  LATVIAN = \"lv\",\n  MALAGASY = \"mg\",\n  MARSHALLESE = \"mh\",\n  MAORI = \"mi\",\n  MACEDONIAN = \"mk\",\n  MALAYALAM = \"ml\",\n  MONGOLIAN = \"mn\",\n  MARATHI = \"mr\",\n  MALAY = \"ms\",\n  MALTESE = \"mt\",\n  BURMESE = \"my\",\n  NAURU = \"na\",\n  NORWEGIAN = \"no\",\n  NORTH_NDEBELE = \"nd\",\n  NEPALI = \"ne\",\n  NDONGA = \"ng\",\n  DUTCH = \"nl\",\n  SOUTH_NDEBELE = \"nr\",\n  NAVAJO = \"nv\",\n  CHICHEWA = \"ny\",\n  OCCITAN = \"oc\",\n  OJIBWA = \"oj\",\n  OROMO = \"om\",\n  ORIYA = \"or\",\n  OSSETIC = \"os\",\n  PANJABI = \"pa\",\n  PALI = \"pi\",\n  POLISH = \"pl\",\n  PUSHTO = \"ps\",\n  PORTUGUESE = \"pt\",\n  QUECHUA = \"qu\",\n  ROMANSH = \"rm\",\n  RUNDI = \"rn\",\n  ROMANIAN = \"ro\",\n  RUSSIAN = \"ru\",\n  KINYARWANDA = \"rw\",\n  SANSKRIT = \"sa\",\n  SARDINIAN = \"sc\",\n  SINDHI = \"sd\",\n  NORTHERN_SAMI = \"se\",\n  SANGO = \"sg\",\n  SINHALA = \"si\",\n  SLOVAK = \"sk\",\n  SLOVENIAN = \"sl\",\n  SAMOAN = \"sm\",\n  SHONA = \"sn\",\n  SOMALI = \"so\",\n  ALBANIAN = \"sq\",\n  SERBIAN = \"sr\",\n  SWATI = \"ss\",\n  SOTHO_SOUTHERN = \"st\",\n  SUNDANESE = \"su\",\n  SWEDISH = \"sv\",\n  SWAHILI = \"sw\",\n  TAMIL = \"ta\",\n  TELUGU = \"te\",\n  TAJIK = \"tg\",\n  THAI = \"th\",\n  TIGRINYA = \"ti\",\n  TURKMEN = \"tk\",\n  TAGALOG = \"tl\",\n  TSWANA = \"tn\",\n  TONGA = \"to\",\n  TURKISH = \"tr\",\n  TSONGA = \"ts\",\n  TATAR = \"tt\",\n  TWI = \"tw\",\n  TAHITIAN = \"ty\",\n  UIGHUR = \"ug\",\n  UKRAINIAN = \"uk\",\n  URDU = \"ur\",\n  UZBEK = \"uz\",\n  VENDA = \"ve\",\n  VIETNAMESE = \"vi\",\n  VOLAPUK = \"vo\",\n  WALLOON = \"wa\",\n  WOLOF = \"wo\",\n  XHOSA = \"xh\",\n  YIDDISH = \"yi\",\n  YORUBA = \"yo\",\n  ZHUANG = \"za\",\n  CHINESE = \"zh\",\n  ZULU = \"zu\",\n}\n\nexport { languages };\n","import { languages } from \"./languages\";\n\n/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  // When a Map is instanciated without a 'style', then this one is the default\n  mapStyle: \"streets-v2\",\n  maptilerLogoURL: \"https://api.maptiler.com/resources/logo.svg\",\n  maptilerURL: \"https://www.maptiler.com/\",\n  maptilerApiURL: \"https://api.maptiler.com/\",\n  rtlPluginURL:\n    \"https://unpkg.com/@mapbox/mapbox-gl-rtl-text@0.2.3/mapbox-gl-rtl-text.min.js\",\n  primaryLanguage: languages.LATIN,\n  secondaryLanguage: languages.NON_LATIN,\n};\n\nObject.freeze(defaults);\n\nexport { defaults };\n","import * as maplibre from \"maplibre-gl\";\nimport { defaults } from \"./defaults\";\nimport Map from \"./Map\";\n\ntype LogoOptions = maplibre.LogoOptions & {\n  logoURL?: string;\n  linkURL?: string;\n};\n\n/**\n * This LogoControl extends the MapLibre LogoControl but instead can use any image URL and\n * any link URL. By default this is using MapTiler logo and URL.\n */\nexport class CustomLogoControl extends maplibre.LogoControl {\n  private logoURL = \"\";\n  private linkURL = \"\";\n\n  constructor(options: LogoOptions = {}) {\n    super(options);\n\n    this.logoURL = options.logoURL ?? defaults.maptilerLogoURL;\n    this.linkURL = options.linkURL ?? defaults.maptilerURL;\n  }\n\n  onAdd(map: Map): HTMLElement {\n    this._map = map;\n    this._compact = this.options && this.options.compact;\n    this._container = window.document.createElement(\"div\");\n    this._container.className = \"maplibregl-ctrl\";\n    const anchor = window.document.createElement(\"a\");\n    anchor.style.backgroundRepeat = \"no-repeat\";\n    anchor.style.cursor = \"pointer\";\n    anchor.style.display = \"block\";\n    anchor.style.height = \"23px\";\n    anchor.style.margin = \"0 0 -4px -4px\";\n    anchor.style.overflow = \"hidden\";\n    anchor.style.width = \"88px\";\n    anchor.style.backgroundImage = `url(${this.logoURL})`;\n    anchor.style.backgroundSize = \"100px 30px\";\n    anchor.style.width = \"100px\";\n    anchor.style.height = \"30px\";\n\n    anchor.target = \"_blank\";\n    anchor.rel = \"noopener nofollow\";\n    anchor.href = this.linkURL;\n    anchor.setAttribute(\n      \"aria-label\",\n      this._map._getUIString(\"LogoControl.Title\")\n    );\n    anchor.setAttribute(\"rel\", \"noopener nofollow\");\n    this._container.appendChild(anchor);\n    this._container.style.display = \"block\";\n\n    this._map.on(\"resize\", this._updateCompact);\n    this._updateCompact();\n\n    return this._container;\n  }\n}\n","import * as maplibre from \"maplibre-gl\";\nimport { config } from \"./config\";\nimport { defaults } from \"./defaults\";\n\n/**\n * Prints on console only if 'verbose' mode from the config is set to true\n * @param args\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function vlog(...args: any[]) {\n  if (config.verbose) {\n    console.log(...args);\n  }\n}\n\n/**\n * Expand the map style provided as argument of the Map constructor\n * @param style\n * @returns\n */\nexport function expandMapStyle(style): string {\n  const trimmed = style.trim();\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    return trimmed;\n  }\n\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  const match = maptilerDomainRegex.exec(trimmed);\n\n  if (match) {\n    return `https://api.maptiler.com/maps/${match[1]}/style.json`;\n  }\n\n  // The style could also possibly just be the name of the style without any URI style\n  let expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`;\n\n  // appending the token if necessary\n  if (!expandedStyle.includes(\"key=\")) {\n    expandedStyle = `${expandedStyle}?key=${config.apiToken}`;\n  }\n\n  return expandedStyle;\n}\n\nexport function enableRTL() {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const maplibrePackage = maplibre as any;\n  if (maplibrePackage.getRTLTextPluginStatus() === \"unavailable\") {\n    maplibrePackage.setRTLTextPlugin(\n      defaults.rtlPluginURL,\n      null,\n      true // Lazy load the plugin\n    );\n  }\n}\n","import * as maplibre from \"maplibre-gl\";\nimport { config } from \"./config\";\nimport { defaults } from \"./defaults\";\nimport { CustomLogoControl } from \"./CustomLogoControl\";\nimport { enableRTL, expandMapStyle, vlog } from \"./tools\";\n\n// StyleSwapOptions is not exported by Maplibre, but we can redefine it (used for setStyle)\nexport type TransformStyleFunction = (\n  previous: maplibre.StyleSpecification,\n  next: maplibre.StyleSpecification\n) => maplibre.StyleSpecification;\nexport type StyleSwapOptions = {\n  diff?: boolean;\n  transformStyle?: TransformStyleFunction;\n};\n\nexport type MapOptions = Omit<maplibre.MapOptions, \"style\" | \"maplibreLogo\"> & {\n  style?: string;\n  maptilerLogo?: boolean;\n};\n\n/**\n * The Map \n */\nexport class Map extends maplibre.Map {\n  private languageShouldUpdate = false; \n\n  constructor(options: MapOptions) {\n    let style = expandMapStyle(defaults.mapStyle);\n\n    if (\"style\" in options) {\n      style = expandMapStyle(options.style as string);\n    } else {\n      vlog(`Map style not provided, backing up to ${defaults.mapStyle}`);\n    }\n\n    // calling the map constructor with full length style\n    super({ ...options, style, maplibreLogo: false });\n\n    // Check if language has been modified and. If so, it will be updated during the next lifecycle step\n    this.on(\"styledataloading\", () => {\n      this.languageShouldUpdate =\n        !!config.primaryLanguage || !!config.secondaryLanguage;\n    });\n\n    // If the config includes language changing, we must update the map language\n    this.on(\"styledata\", () => {\n      if (config.primaryLanguage && this.languageShouldUpdate) {\n        this.setPrimaryLanguage(config.primaryLanguage);\n      }\n\n      if (config.secondaryLanguage && this.languageShouldUpdate) {\n        this.setSecondaryLanguage(config.secondaryLanguage);\n      }\n\n      this.languageShouldUpdate = false;\n    });\n\n    // load the Right-to-Left text plugin (will happen only once)\n    this.once(\"load\", async () => {\n      enableRTL();\n    });\n\n    // Update logo and attibution\n    this.once(\"load\", async () => {\n      let tileJsonURL = null;\n      try {\n        tileJsonURL = (\n          this.getSource(\"openmaptiles\") as maplibre.VectorTileSource\n        ).url;\n      } catch (e) {\n        return;\n      }\n\n      const tileJsonRes = await fetch(tileJsonURL);\n      const tileJsonContent = await tileJsonRes.json();\n\n      // The attribution and logo must show when required\n      if (\"logo\" in tileJsonContent && tileJsonContent.logo) {\n        const logoURL: string = tileJsonContent.logo;\n\n        this.addControl(\n          new CustomLogoControl({ logoURL }),\n          options.logoPosition\n        );\n\n        if (!options.attributionControl) {\n          this.addControl(new maplibre.AttributionControl());\n        }\n      } else if (options.maptilerLogo) {\n        this.addControl(new CustomLogoControl(), options.logoPosition);\n      }\n    });\n  }\n\n  /**\n   *\n   * @param style\n   * @param options\n   * @returns\n   */\n  setStyle(\n    style: maplibre.StyleSpecification | string | null,\n    options?: StyleSwapOptions & maplibre.StyleOptions\n  ) {\n    const expandedStyle = style ? expandMapStyle(style) : null;\n    return super.setStyle(expandedStyle, options);\n  }\n\n  setlanguage(language: string = defaults.primaryLanguage) {\n    this.setPrimaryLanguage(language);\n  }\n\n  setPrimaryLanguage(language: string = defaults.primaryLanguage) {\n    // We want to keep track of it to apply the language again when changing the style\n    config.primaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*(:\\s*(\\S*))?\\s*$/;\n\n    // for string based bilingual lang such as \"{name:latin}  {name:nonlatin}\" or \"{name:latin}  {name}\"\n    const strBilingualRegex =\n      /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}(\\s*){\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // Regex to capture when there are more info, such as mountains elevation with unit m/ft\n    const strMoreInfoRegex = /^(.*)({\\s*name\\s*(:\\s*(\\S*))?\\s*})(.*)$/;\n\n    const langStr = language ? `name:${language}` : \"name\"; // to handle local lang\n    const replacer = [\n      \"case\",\n      [\"has\", langStr],\n      [\"get\", langStr],\n      [\"get\", \"name:latin\"],\n    ];\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout[\"text-field\"]) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(\n        layer.id,\n        \"text-field\"\n      );\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      //\n      // The case 1, 2 and 3 will be updated while maintaining their original type and shape.\n      // The case 3 will not be updated\n\n      let regexMatch;\n\n      // This is case 1\n      if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"concat\"\n      ) {\n        const newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if (\n            (typeof elem === \"string\" || elem instanceof String) &&\n            strLanguageRegex.exec(elem.toString())\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          }\n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          else if (\n            Array.isArray(elem) &&\n            elem.length >= 2 &&\n            elem[0].trim().toLowerCase() === \"get\" &&\n            strLanguageInArrayRegex.exec(elem[1].toString())\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          } else if (\n            Array.isArray(elem) &&\n            elem.length === 4 &&\n            elem[0].trim().toLowerCase() === \"case\"\n          ) {\n            newProp[j] = replacer;\n            break; // we just want to update the primary language\n          }\n        }\n\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // This is case 2\n      else if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"get\" &&\n        strLanguageInArrayRegex.exec(textFieldLayoutProp[1].toString())\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // This is case 3\n      else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        strLanguageRegex.exec(textFieldLayoutProp.toString())\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length === 4 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"case\"\n      ) {\n        const newProp = replacer;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strBilingualRegex.exec(\n          textFieldLayoutProp.toString()\n        )) !== null\n      ) {\n        const newProp = `{${langStr}}${regexMatch[3]}{name${\n          regexMatch[4] || \"\"\n        }}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      } else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strMoreInfoRegex.exec(textFieldLayoutProp.toString())) !==\n          null\n      ) {\n        const newProp = `${regexMatch[1]}{${langStr}}${regexMatch[5]}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n    }\n  }\n\n  setSecondaryLanguage(language: string = defaults.secondaryLanguage) {\n    // We want to keep track of it to apply the language again when changing the style\n    config.secondaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*(:\\s*(\\S*))?\\s*$/;\n\n    // for string based bilingual lang such as \"{name:latin}  {name:nonlatin}\" or \"{name:latin}  {name}\"\n    const strBilingualRegex =\n      /^\\s*{\\s*name\\s*(:\\s*(\\S*))?\\s*}(\\s*){\\s*name\\s*(:\\s*(\\S*))?\\s*}$/;\n\n    let regexMatch;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout[\"text-field\"]) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(\n        layer.id,\n        \"text-field\"\n      );\n\n      let newProp;\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      //\n      // Only the case 1 will be updated because we don't want to change the styling (read: add a secondary language where the original styling is only displaying 1)\n\n      // This is case 1\n      if (\n        Array.isArray(textFieldLayoutProp) &&\n        textFieldLayoutProp.length >= 2 &&\n        textFieldLayoutProp[0].trim().toLowerCase() === \"concat\"\n      ) {\n        newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        let languagesAlreadyFound = 0;\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if (\n            (typeof elem === \"string\" || elem instanceof String) &&\n            strLanguageRegex.exec(elem.toString())\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j] = `{name:${language}}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          }\n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          else if (\n            Array.isArray(elem) &&\n            elem.length >= 2 &&\n            elem[0].trim().toLowerCase() === \"get\" &&\n            strLanguageInArrayRegex.exec(elem[1].toString())\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j][1] = `name:${language}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          } else if (\n            Array.isArray(elem) &&\n            elem.length === 4 &&\n            elem[0].trim().toLowerCase() === \"case\"\n          ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j] = [\"get\", `name:${language}`]; // the situation with 'case' is supposed to only happen with the primary lang\n              break; // but in case a styling also does that for secondary...\n            }\n\n            languagesAlreadyFound += 1;\n          }\n        }\n\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n\n      // the language (both first and second) are defined into a single string model\n      else if (\n        (typeof textFieldLayoutProp === \"string\" ||\n          textFieldLayoutProp instanceof String) &&\n        (regexMatch = strBilingualRegex.exec(\n          textFieldLayoutProp.toString()\n        )) !== null\n      ) {\n        const langStr = language ? `name:${language}` : \"name\"; // to handle local lang\n        newProp = `{name${regexMatch[1] || \"\"}}${regexMatch[3]}{${langStr}}`;\n        this.setLayoutProperty(layer.id, \"text-field\", newProp);\n      }\n    }\n  }\n\n  getLanguages() {\n    const layers = this.getStyle().layers;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout[\"text-field\"]) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(\n        layer.id,\n        \"text-field\"\n      );\n    }\n  }\n}\n","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport class ServiceError extends Error {\n  constructor(public res: Response, customMessage = \"\") {\n    super(\n      `Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`\n    );\n  }\n}\n","import { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { Bbox, LngLat } from \"../generalTypes\";\nimport { ServiceError } from \"./ServiceError\";\n\nexport type GeocoderOptions = {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: Bbox;\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: LngLat;\n\n  /**\n   * Prefer results in specific language. It’s possible to specify multiple values.\n   */\n  language?: string | Array<string>;\n};\n\nconst customMessages = {\n  400: \"Query too long / Invalid parameters\",\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Performs a forward geocoding query to MapTiler API.\n * Providing a human readable place name (of a city, country, street, etc.), the function returns\n * a list of candidate locations including longitude and latitude.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-name-forward\n * @param query\n * @param options\n * @returns\n */\nasync function forward(query, options: GeocoderOptions = {}) {\n  const endpoint = new URL(\n    `geocoding/${encodeURIComponent(query)}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  if (\"bbox\" in options) {\n    endpoint.searchParams.set(\n      \"bbox\",\n      [\n        options.bbox.southWest.lng,\n        options.bbox.southWest.lat,\n        options.bbox.northEast.lng,\n        options.bbox.northEast.lat,\n      ].join(\",\")\n    );\n  }\n\n  if (\"proximity\" in options) {\n    endpoint.searchParams.set(\n      \"proximity\",\n      [options.proximity.lng, options.proximity.lat].join(\",\")\n    );\n  }\n\n  if (\"language\" in options) {\n    const languages = (\n      Array.isArray(options.language) ? options.language : [options.language]\n    ).join(\",\");\n    endpoint.searchParams.set(\"language\", languages);\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n/**\n * Perform a reverse geocoding query to MapTiler API.\n * Providing a longitude and latitude, this function returns a set of human readable information abou this place (country, city, street, etc.)\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geocoding/#search-by-coordinates-reverse\n * @param lngLat\n * @param options\n * @returns\n */\nasync function reverse(lngLat: LngLat, options: GeocoderOptions = {}) {\n  const endpoint = new URL(\n    `geocoding/${lngLat.lng},${lngLat.lat}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  if (\"bbox\" in options) {\n    endpoint.searchParams.set(\n      \"bbox\",\n      [\n        options.bbox.southWest.lng,\n        options.bbox.southWest.lat,\n        options.bbox.northEast.lng,\n        options.bbox.northEast.lat,\n      ].join(\",\")\n    );\n  }\n\n  if (\"proximity\" in options) {\n    endpoint.searchParams.set(\n      \"proximity\",\n      [options.proximity.lng, options.proximity.lat].join(\",\")\n    );\n  }\n\n  if (\"language\" in options) {\n    const languages = (\n      Array.isArray(options.language) ? options.language : [options.language]\n    ).join(\",\");\n    endpoint.searchParams.set(\"language\", languages);\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n\n/**\n * The **geocoder** namespace contains asynchronous functions to call the [MapTiler Geocoding API](https://docs.maptiler.com/cloud/api/geocoding/).\n * The **Geocoder API** provides ways to get geographic coordinates from a human-readable search query of a place (forward geocoding) \n * and to get the location details (country, city, street, etc.) from a geographic coordinate (reverse geocoding);\n */\nconst geocoder = {\n  forward,\n  reverse,\n};\n\nexport { geocoder };\n","import { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Looks up geolocation details from IP address using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/geolocation/#ip-geolocation\n * @returns\n */\nasync function info() {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set(\"key\", config.apiToken);\n  const urlWithParams = endpoint.toString();\n\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n\n/**\n * The **geolocation** namespace contains an asynchronous function to call the [MapTiler Geolocation API](https://docs.maptiler.com/cloud/api/geolocation/).\n * The **Geolocation API** provides a way to retrieve the IP address as well as geographic informations of a machine performing the query (most likely: a user)\n */\nconst geolocation = {\n  info,\n};\n\nexport { geolocation };\n","import { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { LngLat } from \"../generalTypes\";\nimport { ServiceError } from \"./ServiceError\";\n\n\nexport type CoordinatesSearchOptions = {\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number;\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean;\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean;\n};\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Search information about coordinate systems using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#search-coordinate-systems\n * @param query Can be any kind of CRS by name or code\n * @param options\n * @returns\n */\nasync function search(\n  query: string,\n  options: CoordinatesSearchOptions = {}\n) {\n  const endpoint = new URL(\n    `coordinates/search/${query}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  if (\"limit\" in options) {\n    endpoint.searchParams.set(\"limit\", options.limit.toString());\n  }\n\n  if (\"transformations\" in options) {\n    endpoint.searchParams.set(\n      \"transformations\",\n      options.transformations.toString()\n    );\n  }\n\n  if (\"exports\" in options) {\n    endpoint.searchParams.set(\"exports\", options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\nexport type CoordinatesTransformOptions = {\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number;\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number;\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>;\n};\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/coordinates/#transform-coordinates\n * @param coordinates\n * @param options\n * @returns\n */\nasync function transform(\n  coordinates: LngLat | Array<LngLat>,\n  options: CoordinatesTransformOptions = {}\n) {\n  const coordinatesStr = (\n    Array.isArray(coordinates) ? coordinates : [coordinates]\n  )\n    .map((coord) => `${coord.lng},${coord.lat}`)\n    .join(\";\");\n\n  const endpoint = new URL(\n    `coordinates/transform/${coordinatesStr}.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  if (\"sourceCrs\" in options) {\n    endpoint.searchParams.set(\"s_srs\", options.sourceCrs.toString());\n  }\n\n  if (\"targetCrs\" in options) {\n    endpoint.searchParams.set(\"t_srs\", options.targetCrs.toString());\n  }\n\n  if (\"operations\" in options) {\n    endpoint.searchParams.set(\n      \"ops\",\n      (Array.isArray(options.operations)\n        ? options.operations\n        : [options.operations]\n      ).join(\"|\")\n    );\n  }\n\n  const urlWithParams = endpoint.toString();\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n\n/**\n * The **coordinate** namespace contains asynchronous functions to call the [MapTiler Coordinate API](https://docs.maptiler.com/cloud/api/coordinates/).  \n * The goal of the **Coordinate API* is query information about spatial coordinate reference system (CRS) as well as to transform coordinates from one CRS to another.\n */\nconst coordinates = {\n  search,\n  transform,\n};\n\n\nexport { coordinates };\n","import { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { ServiceError } from \"./ServiceError\";\n\nconst customMessages = {\n  403: \"Key is missing, invalid or restricted\",\n};\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API.\n * Learn more on the MapTiler API reference page: https://docs.maptiler.com/cloud/api/data/#geojson\n * @param dataId\n * @returns\n */\nasync function get(dataId: string) {\n  const endpoint = new URL(\n    `data/${encodeURIComponent(dataId)}/features.json`,\n    defaults.maptilerApiURL\n  );\n  endpoint.searchParams.set(\"key\", config.apiToken);\n  const urlWithParams = endpoint.toString();\n\n  const res = await fetch(urlWithParams);\n\n  if (!res.ok) {\n    throw new ServiceError(\n      res,\n      res.status in customMessages ? customMessages[res.status] : \"\"\n    );\n  }\n\n  const obj = await res.json();\n  return obj;\n}\n\n\n/**\n * The **data** namespace contains an asynchronous function to call the [MapTiler Data API](https://docs.maptiler.com/cloud/api/data/).\n * The **Data API** provides a way to retrieve user data in GeoJSON format.\n */\nconst data = {\n  get,\n};\n\nexport { data };\n","/**\\\n * This code is borrowed from https://github.com/mourner/simplify-js and reworked a little.\n */\n\nimport { LngLatArray } from \"./generalTypes\";\n\n// square distance from a point to a segment\nfunction getSqSegDist(\n  p: LngLatArray,\n  p1: LngLatArray,\n  p2: LngLatArray\n): number {\n  let x = p1[0],\n    y = p1[1],\n    dx = p2[0] - x,\n    dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n    const t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\nfunction simplifyDPStep(\n  points: Array<LngLatArray>,\n  first: number,\n  last: number,\n  sqTolerance: number,\n  simplified: Array<LngLatArray>\n) {\n  let maxSqDist = sqTolerance,\n    index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n\n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(\n  points: Array<LngLatArray>,\n  sqTolerance: number\n): Array<LngLatArray> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n// both algorithms combined for awesome performance\nexport default function simplify(\n  points: Array<LngLatArray>,\n  tolerance: number\n): Array<LngLatArray> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}\n","import { config } from \"../config\";\nimport { defaults } from \"../defaults\";\nimport { Bbox, LngLatArray, LngLat } from \"../generalTypes\";\nimport simplify from \"../simplify\";\n\n\ntype StaticMapBaseOptions = {\n  /**\n   * Style of the map (not full style URL). Example: \"winter\", \"streets-v2\".\n   * Default: `\"streets-v2\"`\n   */\n  style?: string;\n\n  /**\n   * Double the size of the static map image to support hiDPI/Retina monitors.\n   * Default: `false`\n   */\n  hiDPI?: boolean;\n\n  /**\n   * Image format.\n   * Default: `\"png\"`\n   */\n  format?: \"png\" | \"jpg\" | \"webp\";\n\n  /**\n   * Width of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  width?: number;\n\n  /**\n   * Height of the output image. Maximum value: `2048`.\n   * Default: `1024`\n   */\n  height?: number;\n\n  /**\n   * Placement of the attribution. Can also be set to `false` to not show attribution.\n   * Default: `\"bottomright\"`\n   */\n  attribution?: \"bottomright\" | \"bottomleft\" | \"topleft\" | \"topright\" | false;\n\n  /**\n   * A marker or list of markers to show on the map\n   * Default: none provided\n   */\n  marker?: StaticMapMarker | Array<StaticMapMarker>;\n\n  /**\n   * URL of the marker image. Applies only if one or multiple markers positions are provided.\n   * Default: none provided\n   */\n  markerIcon?: string;\n\n  /**\n   * Position of the marker regarding its coordinates. Applies only:\n   * - with a custom icon provided with `markerIcon`\n   * - if one or multiple markers positions are provided.\n   * Default: `\"bottom\"`\n   */\n  markerAnchor?:\n    | \"top\"\n    | \"left\"\n    | \"bottom\"\n    | \"right\"\n    | \"center\"\n    | \"topleft\"\n    | \"bottomleft\"\n    | \"topright\"\n    | \"bottomright\";\n\n  /**\n   * Draw a path or polygon on top of the map. If the path is too long it will be simplified, yet remaining accurate.\n   * Default: none provided\n   */\n  path?: Array<LngLatArray>;\n\n  /**\n   * Color of the path line. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: `\"blue\"`\n   */\n  pathStrokeColor?: string;\n\n  /**\n   * Color of the filling, also works if the polygon is not closed. The color must be CSS compatible.\n   * Examples:\n   * - long form hex without transparency `\"#FF0000\"` (red)\n   * - short form hex without transparency `\"#F00\"` (red)\n   * - long form hex with transparency `\"#FF000008\"` (red, half opacity)\n   * - short form hex with transparency `\"#F008\"` (red, half opacity)\n   * - CSS color shorthands: `\"red\"`, `\"chartreuse\"`, etc.\n   * - decimal RGB values without transparency: `\"rgb(128, 100, 255)\"`\n   * - decimal RGB values with transparency: `\"rgb(128, 100, 255, 0.5)\"`\n   * Default: none (transparent filling)\n   */\n  pathFillColor?: string;\n\n  /**\n   * Width of the path line in pixel. It can be floating point precision (ex: `0.5`)\n   * Default: `1` if `hiDPI` is `false` and `2` if `hiDPI` is `true`.\n   */\n  pathWidth?: number;\n};\n\nexport type CenteredStaticMapOptions = StaticMapBaseOptions;\n\nexport type BoundedStaticMapOptions = StaticMapBaseOptions & {\n  /**\n   * Extra space added around the regio of interest, in percentage.\n   * Default: `0.1` (for 10%)\n   */\n  padding?: number;\n}\n\nexport type AutomaticStaticMapOptions = BoundedStaticMapOptions;\n\nexport type StaticMapMarker = {\n  /**\n   * \n   */\n  lng: number;\n  lat: number;\n  color?: string;\n};\n\nfunction staticMapMarkerToString(\n  marker: StaticMapMarker,\n  includeColor = true\n) {\n  let str = `${marker.lng},${marker.lat}`;\n\n  if (marker.color && includeColor) {\n    str += `,${marker.color}`;\n  }\n\n  return str;\n}\n\nfunction simplifyAndStringify(\n  path: Array<LngLatArray>,\n  maxNbChar = 3000\n): string {\n  let str = path.map((point) => point.join(\",\")).join(\"|\");\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while (str.length > maxNbChar) {\n    const simplerPath = simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map((point) => `${point[0]},${point[1]}`).join(\"|\");\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param center\n * @param zoom\n * @param options\n * @returns\n */\nfunction centered(\n  center: LngLat,\n  zoom: number,\n  options: CenteredStaticMapOptions = {}\n): string {\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${center.lng},${\n      center.lat\n    },${zoom}/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"marker\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.marker)\n      ? options.marker\n      : [options.marker];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param boundingBox\n * @param options\n * @returns\n */\nfunction bounded(\n  boundingBox: Bbox,\n  options: BoundedStaticMapOptions = {}\n) {\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(style)}/static/${boundingBox.southWest.lng},${\n      boundingBox.southWest.lat\n    },${boundingBox.northEast.lng},${\n      boundingBox.northEast.lat\n    }/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"marker\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && options.hiDPI) {\n      markerStr += `scale:2|`;\n    }\n\n    const markerList = Array.isArray(options.marker)\n      ? options.marker\n      : [options.marker];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  return endpoint.toString();\n}\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param options\n * @returns\n */\nfunction automatic(options: AutomaticStaticMapOptions = {}) {\n  if (!(\"marker\" in options) && !(\"path\" in options)) {\n    throw new Error(\n      \"Automatic static maps require markers and/or path to be created.\"\n    );\n  }\n\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? \"@2x\" : \"\";\n  const format = options.format ?? \"png\";\n  let width = ~~(options.width ?? 1024);\n  let height = ~~(options.height ?? 1024);\n\n  if (options.hiDPI) {\n    width = ~~(width / 2);\n    height = ~~(height / 2);\n  }\n\n  const endpoint = new URL(\n    `maps/${encodeURIComponent(\n      style\n    )}/static/auto/${width}x${height}${scale}.${format}`,\n    defaults.maptilerApiURL\n  );\n\n  if (\"attribution\" in options) {\n    endpoint.searchParams.set(\"attribution\", options.attribution.toString());\n  }\n\n  if (\"padding\" in options) {\n    endpoint.searchParams.set(\"padding\", options.padding.toString());\n  }\n\n  if (\"marker\" in options) {\n    let markerStr = \"\";\n\n    const hasIcon = \"markerIcon\" in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && \"markerAnchor\" in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && \"markerScale\" in options) {\n      markerStr += `scale:2}|`;\n    }\n\n    const markerList = Array.isArray(options.marker)\n      ? options.marker\n      : [options.marker];\n    markerStr += markerList\n      .map((m) => staticMapMarkerToString(m, !hasIcon))\n      .join(\"|\");\n    endpoint.searchParams.set(\"markers\", markerStr);\n  }\n\n  if (\"path\" in options) {\n    let pathStr = \"\";\n\n    pathStr += `fill:${options.pathFillColor ?? \"none\"}|`;\n\n    if (\"pathStrokeColor\" in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n    if (\"pathWidth\" in options) {\n      const pathWidth = options.pathWidth / (options.hiDPI ? 2 : 1);\n      pathStr += `width:${pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set(\"path\", pathStr);\n  }\n\n  endpoint.searchParams.set(\"key\", config.apiToken);\n\n  return endpoint.toString();\n}\n\n\n/**\n * The **staticMaps** namespace contains an synchronous function build image URL of static map, as specified by the [MapTiler Static Map API](https://docs.maptiler.com/cloud/api/static-maps/).\n * The URL of static maps can then be used within a `<img />` markup element, as the `src` property value.\n */\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n};\n\n\nexport { staticMaps };\n","enum units {\n  METRIC,\n  IMPERIAL,\n}\n\nexport { units };\n"],"names":["languages","__async","customMessages","coordinates","units"],"mappings":"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"}