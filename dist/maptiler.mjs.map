{"version":3,"file":"maptiler.mjs","sources":["../src/config.ts","../src/defaults.ts","../src/LogoControl.ts","../src/tools.ts","../src/Map.ts","../src/services/ServiceError.ts","../src/services/geocoder.ts","../src/services/geolocation.ts","../src/services/coordinates.ts","../src/services/data.ts"],"sourcesContent":["interface ConfigInterface {\n  apiToken: string,\n  verbose: boolean,\n}\n\nconst config: ConfigInterface = {\n  apiToken: 'Not defined yet.',\n  verbose: false,\n}\n\nexport { config };","\n/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  // When a Map is instanciated without a 'style', then this one is the default\n  mapStyle: 'streets',\n  maptilerLogoURL: 'https://api.maptiler.com/resources/logo.svg',\n  maptilerURL: 'https://www.maptiler.com/',\n  maptilerApiURL: 'https://api.maptiler.com/',\n};\n\nexport default defaults;","import * as maplibre from 'maplibre-gl'\nimport defaults from './defaults';\nimport Map from './Map'\n\ntype LogoOptions = maplibre.LogoOptions & {\n  logoURL?: string,\n  linkURL?: string,\n}\n\n/**\n * This LogoControl extends the MapLibre LogoControl but instead can use any image URL and\n * any link URL. By default this is using MapTiler logo and URL.\n */\nexport default class LogoControl extends maplibre.LogoControl {\n  private logoURL:string = '';\n  private linkURL:string = '';\n  \n  constructor(options: LogoOptions = {}) {\n    super(options);\n\n    this.logoURL = options.logoURL ?? defaults.maptilerLogoURL;\n    this.linkURL = options.linkURL ?? defaults.maptilerURL;    \n  }\n\n  onAdd(map: Map) {\n    this._map = map;\n    this._compact = this.options && this.options.compact;\n    this._container = window.document.createElement('div');\n    this._container.className = 'maplibregl-ctrl';\n    const anchor = window.document.createElement('a');\n    anchor.style.backgroundRepeat = 'no-repeat';\n    anchor.style.cursor = 'pointer';\n    anchor.style.display = 'block';\n    anchor.style.height = '23px';\n    anchor.style.margin = '0 0 -4px -4px';\n    anchor.style.overflow = 'hidden';\n    anchor.style.width = '88px';\n    anchor.style.backgroundImage = `url(${this.logoURL})`;\n    anchor.style.backgroundSize = '100px 30px';\n    anchor.style.width = '100px';\n    anchor.style.height = '30px';\n\n    anchor.target = '_blank';\n    anchor.rel = 'noopener nofollow';\n    anchor.href = this.linkURL;\n    anchor.setAttribute('aria-label', this._map._getUIString('LogoControl.Title'));\n    anchor.setAttribute('rel', 'noopener nofollow');\n    this._container.appendChild(anchor);\n    this._container.style.display = 'block';\n\n    this._map.on('resize', this._updateCompact);\n    this._updateCompact();\n\n    return this._container;\n  }\n}","import { config } from \"./config\";\n\n/**\n * Prints on console only if 'verbose' mode from the config is set to true\n * @param args \n */\nexport function vlog(...args: any[]) {\n  if (config.verbose) {\n    console.log(...arguments);\n  }\n}\n\n\n/**\n * Expand the map style provided as argument of the Map constructor\n * @param style \n * @returns \n */\nexport function expandMapStyle(style): string {\n  const trimmed = style.trim();\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    return trimmed;\n  }\n\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  const match = maptilerDomainRegex.exec(trimmed);\n  \n  if (match) {\n    return `https://api.maptiler.com/maps/${match[1]}/style.json`\n  } \n\n  // The style could also possibly just be the name of the style without any URI style\n  return `https://api.maptiler.com/maps/${trimmed}/style.json`\n}","import * as maplibre from 'maplibre-gl';\nimport { config } from './config';\nimport defaults from './defaults';\nimport LogoControl from './LogoControl';\nimport { expandMapStyle, vlog } from './tools';\n\n\nexport type MapOptions = Omit<maplibre.MapOptions, \"style\" | \"maplibreLogo\" > & {\n  style?: string,\n  maptilerLogo?: boolean,\n}\n\n/**\n * Map constructor\n */\nexport default class Map extends maplibre.Map {\n  private attributionMustDisplay: boolean = false;\n  private attibutionLogoUrl: string = '';\n\n  constructor(options: MapOptions) { \n    let style = expandMapStyle(defaults.mapStyle);\n\n    if (\"style\" in options) {\n      style = expandMapStyle(options.style as string);\n    } else {\n      vlog(`Map style not provided, backing up to ${defaults.mapStyle}`);\n    }\n\n    // appending the token if necessary\n    if (!style.includes('key=')) {\n      style = `${style}?key=${config.apiToken}`\n    }\n\n    // calling the map constructor with full length style\n    super({...options, style, maplibreLogo: false });\n\n\n    this.once(\"load\", async () => {\n      let tileJsonURL = null;\n      try {\n        tileJsonURL = (this.getSource(\"openmaptiles\") as maplibre.VectorTileSource).url;\n      } catch(e) {\n        return;\n      }\n\n      const tileJsonRes = await fetch(tileJsonURL);\n      const tileJsonContent = await tileJsonRes.json();\n\n      // The attribution and logo must show when required\n      if ((\"logo\" in tileJsonContent && tileJsonContent.logo)) {\n        this.attributionMustDisplay = true;\n        this.attibutionLogoUrl = tileJsonContent.logo;\n        const logoURL: string = tileJsonContent.logo;\n\n        this.addControl(new LogoControl({logoURL}), options.logoPosition);\n\n        if (!options.attributionControl) {\n          this.addControl(new maplibre.AttributionControl())\n        }\n      } else if (options.maptilerLogo) {\n        this.addControl(new LogoControl(), options.logoPosition);\n      }\n    })\n  }\n\n}","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport default class ServiceError extends Error {\n  constructor(public res: Response, customMessage: string = '') {\n    super(`Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`)\n  }\n}","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport { bboxType, lngLatType } from \"../generalTypes\";\nimport ServiceError from \"./ServiceError\";\n\n\nexport type geocoderOptionsType = {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: bboxType,\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: lngLatType,\n\n  /**\n   * Prefer results in specific language. Itâ€™s possible to specify multiple values.\n   */\n  language?: string | Array<string>, \n}\n\n\nconst customMessages = {\n  400: 'Query too long / Invalid parameters',\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Performs a forward geocoding query to MapTiler API\n * @param query \n * @param options \n * @returns \n */\nasync function forward(query, options: geocoderOptionsType = {}) {\n  const endpoint = new URL(`geocoding/${encodeURIComponent(query)}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('bbox' in options) {\n    endpoint.searchParams.set('bbox', [\n      options.bbox.southWest.lng,\n      options.bbox.southWest.lat,\n      options.bbox.northEast.lng,\n      options.bbox.northEast.lat,\n    ].join(','));\n  }\n\n  if ('proximity' in options) {\n    endpoint.searchParams.set('proximity', [\n      options.proximity.lng, \n      options.proximity.lat,\n    ].join(','));\n  }\n\n  if ('language' in options) {\n    const languages = (Array.isArray(options.language) ? options.language : [options.language]).join(',');\n    endpoint.searchParams.set('language', languages);\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\n/**\n * Perform a reverse geocoding query to MapTiler API\n * @param lngLat \n * @param options \n * @returns \n */\nasync function reverse(lngLat: lngLatType, options: geocoderOptionsType = {}) {\n  const endpoint = new URL(`geocoding/${lngLat.lng},${lngLat.lat}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('bbox' in options) {\n    endpoint.searchParams.set('bbox', [\n      options.bbox.southWest.lng,\n      options.bbox.southWest.lat,\n      options.bbox.northEast.lng,\n      options.bbox.northEast.lat,\n    ].join(','));\n  }\n\n  if ('proximity' in options) {\n    endpoint.searchParams.set('proximity', [\n      options.proximity.lng, \n      options.proximity.lat,\n    ].join(','));\n  }\n\n  if ('language' in options) {\n    const languages = (Array.isArray(options.language) ? options.language : [options.language]).join(',');\n    endpoint.searchParams.set('language', languages);\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\nconst geocoder = {\n  forward,\n  reverse\n}\n\nexport default geocoder;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport ServiceError from \"./ServiceError\";\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Looks up geolocation details from IP address using MapTiler API\n * @returns \n */\nasync function info() {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n  const urlWithParams = endpoint.toString()\n  \n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nconst geolocation = {\n  info,\n}\n\nexport default geolocation;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport { lngLatType } from \"../generalTypes\";\nimport ServiceError from \"./ServiceError\";\n\n\nexport type coordinatesSearchOptionsType = {\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number,\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean,\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean,\n}\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Search information about coordinate systems using MapTiler API\n * @param query \n * @param options \n * @returns \n */\nasync function search(query: string, options: coordinatesSearchOptionsType = {}) {\n  const endpoint = new URL(`coordinates/search/${query}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('limit' in options) {\n    endpoint.searchParams.set('limit', options.limit.toString());\n  }\n\n  if ('transformations' in options) {\n    endpoint.searchParams.set('transformations', options.transformations.toString());\n  }\n\n  if ('exports' in options) {\n    endpoint.searchParams.set('exports', options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nexport type coordinatesTransformOptionsType = {\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number,\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number,\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>,\n}\n\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API\n * @param coordinates \n * @param options \n * @returns \n */\nasync function transform(coordinates: lngLatType | Array<lngLatType>, options: coordinatesTransformOptionsType = {}) {\n  const coordinatesStr = (Array.isArray(coordinates) ? coordinates : [coordinates]).map(coord => `${coord.lng},${coord.lat}`).join(';');\n\n  const endpoint = new URL(`coordinates/transform/${coordinatesStr}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('sourceCrs' in options) {\n    endpoint.searchParams.set('s_srs', options.sourceCrs.toString());\n  }\n\n  if ('targetCrs' in options) {\n    endpoint.searchParams.set('t_srs', options.targetCrs.toString());\n  }\n\n  if ('operations' in options) {\n    endpoint.searchParams.set('ops', (Array.isArray(options.operations) ? options.operations : [options.operations]).join('|'));\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\nconst coordinates = {\n  search,\n  transform,\n}\n\nexport default coordinates;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport ServiceError from \"./ServiceError\";\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API\n * @param dataId \n * @returns \n */\nasync function get(dataId: string) {\n  const endpoint = new URL(`data/${encodeURIComponent(dataId)}/features.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n  const urlWithParams = endpoint.toString()\n  \n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nconst data = {\n  get,\n}\n\nexport default data;"],"names":["__async","customMessages","coordinates"],"mappings":"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"}