{"version":3,"file":"maptiler.mjs","sources":["../src/config.ts","../src/defaults.ts","../src/CustomLogoControl.ts","../src/tools.ts","../src/Map.ts","../src/services/ServiceError.ts","../src/services/geocoder.ts","../src/services/geolocation.ts","../src/services/coordinates.ts","../src/services/data.ts","../src/simplify.ts","../src/services/staticMaps.ts","../src/languages.ts"],"sourcesContent":["interface ConfigInterface {\n  apiToken: string,\n  verbose: boolean,\n  primaryLanguage: string | null,\n  secondaryLanguage: string | null,\n}\n\nconst config: ConfigInterface = {\n  apiToken: 'Not defined yet.',\n  verbose: false,\n  primaryLanguage: null,\n  secondaryLanguage: null,\n}\n\nexport { config };","\n/**\n * Some default settings for the SDK\n */\nconst defaults = {\n  // When a Map is instanciated without a 'style', then this one is the default\n  mapStyle: 'streets',\n  maptilerLogoURL: 'https://api.maptiler.com/resources/logo.svg',\n  maptilerURL: 'https://www.maptiler.com/',\n  maptilerApiURL: 'https://api.maptiler.com/',\n  primaryLanguage: 'latin',\n  secondaryLanguage: 'nonlatin',\n};\n\nObject.freeze(defaults);\n\nexport default defaults;","import * as maplibre from 'maplibre-gl'\nimport defaults from './defaults';\nimport Map from './Map'\n\ntype LogoOptions = maplibre.LogoOptions & {\n  logoURL?: string,\n  linkURL?: string,\n}\n\n/**\n * This LogoControl extends the MapLibre LogoControl but instead can use any image URL and\n * any link URL. By default this is using MapTiler logo and URL.\n */\nexport default class CustomLogoControl extends maplibre.LogoControl {\n  private logoURL:string = '';\n  private linkURL:string = '';\n  \n  constructor(options: LogoOptions = {}) {\n    super(options);\n\n    this.logoURL = options.logoURL ?? defaults.maptilerLogoURL;\n    this.linkURL = options.linkURL ?? defaults.maptilerURL;    \n  }\n\n  onAdd(map: Map): HTMLElement {\n    this._map = map;\n    this._compact = this.options && this.options.compact;\n    this._container = window.document.createElement('div');\n    this._container.className = 'maplibregl-ctrl';\n    const anchor = window.document.createElement('a');\n    anchor.style.backgroundRepeat = 'no-repeat';\n    anchor.style.cursor = 'pointer';\n    anchor.style.display = 'block';\n    anchor.style.height = '23px';\n    anchor.style.margin = '0 0 -4px -4px';\n    anchor.style.overflow = 'hidden';\n    anchor.style.width = '88px';\n    anchor.style.backgroundImage = `url(${this.logoURL})`;\n    anchor.style.backgroundSize = '100px 30px';\n    anchor.style.width = '100px';\n    anchor.style.height = '30px';\n\n    anchor.target = '_blank';\n    anchor.rel = 'noopener nofollow';\n    anchor.href = this.linkURL;\n    anchor.setAttribute('aria-label', this._map._getUIString('LogoControl.Title'));\n    anchor.setAttribute('rel', 'noopener nofollow');\n    this._container.appendChild(anchor);\n    this._container.style.display = 'block';\n\n    this._map.on('resize', this._updateCompact);\n    this._updateCompact();\n\n    return this._container;\n  }\n}","import { config } from \"./config\";\n\n/**\n * Prints on console only if 'verbose' mode from the config is set to true\n * @param args \n */\nexport function vlog(...args: any[]) {\n  if (config.verbose) {\n    console.log(...arguments);\n  }\n}\n\n\n/**\n * Expand the map style provided as argument of the Map constructor\n * @param style \n * @returns \n */\nexport function expandMapStyle(style): string {\n  const trimmed = style.trim();\n\n  // The style was possibly already given as expanded URL\n  if (trimmed.startsWith(\"http://\") || trimmed.startsWith(\"https://\")) {\n    return trimmed;\n  }\n\n  // testing if the style provided is of form \"maptiler://some-style\"\n  const maptilerDomainRegex = /^maptiler:\\/\\/(.*)/;\n  const match = maptilerDomainRegex.exec(trimmed);\n  \n  if (match) {\n    return `https://api.maptiler.com/maps/${match[1]}/style.json`\n  } \n\n  // The style could also possibly just be the name of the style without any URI style\n  let expandedStyle = `https://api.maptiler.com/maps/${trimmed}/style.json`\n\n  // appending the token if necessary\n  if (!expandedStyle.includes('key=')) {\n    expandedStyle = `${expandedStyle}?key=${config.apiToken}`\n  }\n\n  return expandedStyle;\n}","import * as maplibre from 'maplibre-gl';\nimport { config } from './config';\nimport constants from './constants';\nimport defaults from './defaults';\nimport CustomLogoControl from './CustomLogoControl';\nimport { expandMapStyle, vlog } from './tools';\nimport StyleSwapOptions from 'maplibre-gl/src/style/style';\n\n\nexport type MapOptions = Omit<maplibre.MapOptions, \"style\" | \"maplibreLogo\" > & {\n  style?: string,\n  maptilerLogo?: boolean,\n}\n\n/**\n * Map constructor\n */\nexport default class Map extends maplibre.Map {\n  private attributionMustDisplay: boolean = false;\n  private attibutionLogoUrl: string = '';\n  private super_setStyle: Function;\n\n  constructor(options: MapOptions) { \n    let style = expandMapStyle(defaults.mapStyle);\n\n    if (\"style\" in options) {\n      style = expandMapStyle(options.style as string);\n    } else {\n      vlog(`Map style not provided, backing up to ${defaults.mapStyle}`);\n    }\n\n    // calling the map constructor with full length style\n    super({...options, style, maplibreLogo: false });\n\n    // this.super_setStyle = super.setStyle;\n\n    this.on('styledata', () => {\n      // If the config includes language changing, we must update the map language\n      if (config.primaryLanguage) {\n        this.setPrimaryLanguage(config.primaryLanguage)\n      }\n\n      if (config.secondaryLanguage) {\n        this.setSecondaryLanguage(config.secondaryLanguage)\n      }\n    })\n\n    this.once(\"load\", async () => {\n      let tileJsonURL = null;\n      try {\n        tileJsonURL = (this.getSource(\"openmaptiles\") as maplibre.VectorTileSource).url;\n      } catch(e) {\n        return;\n      }\n\n      const tileJsonRes = await fetch(tileJsonURL);\n      const tileJsonContent = await tileJsonRes.json();\n\n      // The attribution and logo must show when required\n      if ((\"logo\" in tileJsonContent && tileJsonContent.logo)) {\n        this.attributionMustDisplay = true;\n        this.attibutionLogoUrl = tileJsonContent.logo;\n        const logoURL: string = tileJsonContent.logo;\n\n        this.addControl(new CustomLogoControl({logoURL}), options.logoPosition);\n\n        if (!options.attributionControl) {\n          this.addControl(new maplibre.AttributionControl())\n        }\n      } else if (options.maptilerLogo) {\n        this.addControl(new CustomLogoControl(), options.logoPosition);\n      }\n    })\n  }\n\n\n  setStyle(style: maplibre.StyleSpecification | string | null, options?: StyleSwapOptions & maplibre.StyleOptions) {\n    const expandedStyle = style ? expandMapStyle(style) : null;\n    return super.setStyle(expandedStyle, options);\n  }\n\n\n  setPrimaryLanguage(language: string = defaults.primaryLanguage) {\n    // We want to keep track of it to apply the language again when changing the style\n    config.primaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*:\\s*(\\S*)\\s*}\\s*$/;\n    \n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*:\\s*(\\S*)\\s*$/;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout['text-field']) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(layer.id, 'text-field');\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      // \n      // The case 1, 2 and 3 will be updated while maintaining their original type and shape.\n      // The case 3 will not be updated\n\n      // This is case 1\n      if (Array.isArray(textFieldLayoutProp) && textFieldLayoutProp.length >= 2 && textFieldLayoutProp[0].trim().toLowerCase() === 'concat') {\n        const newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if ((typeof elem === 'string' || elem instanceof String ) && strLanguageRegex.exec(elem.toString()) ) {\n            newProp[j] = `{name:${language}}`;\n            break; // we just want to update the primary language\n\n          } else \n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          if (Array.isArray(elem) && elem.length >= 2 && elem[0].trim().toLowerCase() === 'get' && strLanguageInArrayRegex.exec(elem[1].toString())) {\n            newProp[j][1] = `name:${language}`;\n            break; // we just want to update the primary language\n          }\n        }\n\n        this.setLayoutProperty(layer.id, 'text-field', newProp);\n      } else \n      \n      // This is case 2\n      if (Array.isArray(textFieldLayoutProp) && textFieldLayoutProp.length >= 2 && textFieldLayoutProp[0].trim().toLowerCase() === 'get' && strLanguageInArrayRegex.exec(textFieldLayoutProp[1].toString())) {\n        const newProp = textFieldLayoutProp.slice();\n        newProp[1] = `name:${language}`;\n        this.setLayoutProperty(layer.id, 'text-field', newProp);\n      } else \n\n      // This is case 3\n      if ((typeof textFieldLayoutProp === 'string' || textFieldLayoutProp instanceof String ) && strLanguageRegex.exec(textFieldLayoutProp.toString()) ) {\n        const newProp = `{name:${language}}`;\n        this.setLayoutProperty(layer.id, 'text-field', newProp);\n      }\n    }\n  }\n\n\n  setSecondaryLanguage(language: string = defaults.secondaryLanguage) {\n    // We want to keep track of it to apply the language again when changing the style\n    config.secondaryLanguage = language;\n\n    const layers = this.getStyle().layers;\n\n    // detects pattern like \"{name:somelanguage}\" with loose spacing\n    const strLanguageRegex = /^\\s*{\\s*name\\s*:\\s*(\\S*)\\s*}\\s*$/;\n\n    // detects pattern like \"name:somelanguage\" with loose spacing\n    const strLanguageInArrayRegex = /^\\s*name\\s*:\\s*(\\S*)\\s*$/;\n\n    for (let i = 0; i < layers.length; i += 1) {\n      const layer = layers[i];\n      const layout = layer.layout;\n\n      if (!layout) {\n        continue;\n      }\n\n      if (!layout['text-field']) {\n        continue;\n      }\n\n      const textFieldLayoutProp = this.getLayoutProperty(layer.id, 'text-field');\n\n      // Note:\n      // The value of the 'text-field' property can take multiple shape;\n      // 1. can be an array with 'concat' on its first element (most likely means bilingual)\n      // 2. can be an array with 'get' on its first element (monolingual)\n      // 3. can be a string of shape '{name:latin}'\n      // 4. can be a string referencing another prop such as '{housenumber}' or '{ref}'\n      // \n      // Only the case 1 will be updated because we don't want to change the styling (read: add a secondary language where the original styling is only displaying 1)\n\n      // This is case 1\n      if (Array.isArray(textFieldLayoutProp) && textFieldLayoutProp.length >= 2 && textFieldLayoutProp[0].trim().toLowerCase() === 'concat') {\n        const newProp = textFieldLayoutProp.slice(); // newProp is Array\n        // The style could possibly have defined more than 2 concatenated language strings but we only want to edit the first\n        // The style could also define that there are more things being concatenated and not only languages\n\n        let languagesAlreadyFound = 0;\n\n        for (let j = 0; j < textFieldLayoutProp.length; j += 1) {\n          const elem = textFieldLayoutProp[j];\n\n          // we are looking for an elem of shape '{name:somelangage}' (string) of `[\"get\", \"name:somelanguage\"]` (array)\n\n          // the entry of of shape '{name:somelangage}', possibly with loose spacing\n          if ((typeof elem === 'string' || elem instanceof String ) && strLanguageRegex.exec(elem.toString()) ) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j] = `{name:${language}}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          } else \n          // the entry is of an array of shape `[\"get\", \"name:somelanguage\"]`\n          if (Array.isArray(elem) && elem.length >= 2 && elem[0].trim().toLowerCase() === 'get' && strLanguageInArrayRegex.exec(elem[1].toString())) {\n            if (languagesAlreadyFound === 1) {\n              newProp[j][1] = `name:${language}`;\n              break; // we just want to update the secondary language\n            }\n\n            languagesAlreadyFound += 1;\n          }\n        }\n\n        this.setLayoutProperty(layer.id, 'text-field', newProp);\n      }\n    }\n  }\n\n\n\n}","/**\n * A ServiceError is an Error that includes the HTTP response details\n */\nexport default class ServiceError extends Error {\n  constructor(public res: Response, customMessage: string = '') {\n    super(`Call to enpoint ${res.url} failed with the status code ${res.status}. ${customMessage}`)\n  }\n}","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport { bboxType, lngLatType } from \"../generalTypes\";\nimport ServiceError from \"./ServiceError\";\n\n\nexport type geocoderOptionsType = {\n  /**\n   * Only search for results in the specified area.\n   */\n  bbox?: bboxType,\n\n  /**\n   * Prefer results close to a specific location.\n   */\n  proximity?: lngLatType,\n\n  /**\n   * Prefer results in specific language. It’s possible to specify multiple values.\n   */\n  language?: string | Array<string>, \n}\n\n\nconst customMessages = {\n  400: 'Query too long / Invalid parameters',\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Performs a forward geocoding query to MapTiler API\n * @param query \n * @param options \n * @returns \n */\nasync function forward(query, options: geocoderOptionsType = {}) {\n  const endpoint = new URL(`geocoding/${encodeURIComponent(query)}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('bbox' in options) {\n    endpoint.searchParams.set('bbox', [\n      options.bbox.southWest.lng,\n      options.bbox.southWest.lat,\n      options.bbox.northEast.lng,\n      options.bbox.northEast.lat,\n    ].join(','));\n  }\n\n  if ('proximity' in options) {\n    endpoint.searchParams.set('proximity', [\n      options.proximity.lng, \n      options.proximity.lat,\n    ].join(','));\n  }\n\n  if ('language' in options) {\n    const languages = (Array.isArray(options.language) ? options.language : [options.language]).join(',');\n    endpoint.searchParams.set('language', languages);\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\n/**\n * Perform a reverse geocoding query to MapTiler API\n * @param lngLat \n * @param options \n * @returns \n */\nasync function reverse(lngLat: lngLatType, options: geocoderOptionsType = {}) {\n  const endpoint = new URL(`geocoding/${lngLat.lng},${lngLat.lat}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('bbox' in options) {\n    endpoint.searchParams.set('bbox', [\n      options.bbox.southWest.lng,\n      options.bbox.southWest.lat,\n      options.bbox.northEast.lng,\n      options.bbox.northEast.lat,\n    ].join(','));\n  }\n\n  if ('proximity' in options) {\n    endpoint.searchParams.set('proximity', [\n      options.proximity.lng, \n      options.proximity.lat,\n    ].join(','));\n  }\n\n  if ('language' in options) {\n    const languages = (Array.isArray(options.language) ? options.language : [options.language]).join(',');\n    endpoint.searchParams.set('language', languages);\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\nconst geocoder = {\n  forward,\n  reverse\n}\n\nexport default geocoder;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport ServiceError from \"./ServiceError\";\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Looks up geolocation details from IP address using MapTiler API\n * @returns \n */\nasync function info() {\n  const endpoint = new URL(`geolocation/ip.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n  const urlWithParams = endpoint.toString()\n  \n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nconst geolocation = {\n  info,\n}\n\nexport default geolocation;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport { lngLatType } from \"../generalTypes\";\nimport ServiceError from \"./ServiceError\";\n\n\nexport type coordinatesSearchOptionsType = {\n  /**\n   * Maximum number of results returned (default: 10)\n   */\n  limit?: number,\n\n  /**\n   *  Show detailed transformations for each CRS (default: false)\n   */\n  transformations?: boolean,\n\n  /**\n   * Show exports in WKT and Proj4 notations (default: false)\n   */\n  exports?: boolean,\n}\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Search information about coordinate systems using MapTiler API\n * @param query \n * @param options \n * @returns \n */\nasync function search(query: string, options: coordinatesSearchOptionsType = {}) {\n  const endpoint = new URL(`coordinates/search/${query}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('limit' in options) {\n    endpoint.searchParams.set('limit', options.limit.toString());\n  }\n\n  if ('transformations' in options) {\n    endpoint.searchParams.set('transformations', options.transformations.toString());\n  }\n\n  if ('exports' in options) {\n    endpoint.searchParams.set('exports', options.exports.toString());\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nexport type coordinatesTransformOptionsType = {\n  /**\n   * Source coordinate reference system (default: 4326)\n   */\n  sourceCrs?: number,\n\n  /**\n   * Target coordinate reference system (default: 4326)\n   */\n  targetCrs?: number,\n\n  /**\n   * List of codes of operations\n   */\n  operations?: number | Array<number>,\n}\n\n\n/**\n * Transforms coordinates from a source reference system to a target reference system using MapTiler API\n * @param coordinates \n * @param options \n * @returns \n */\nasync function transform(coordinates: lngLatType | Array<lngLatType>, options: coordinatesTransformOptionsType = {}) {\n  const coordinatesStr = (Array.isArray(coordinates) ? coordinates : [coordinates]).map(coord => `${coord.lng},${coord.lat}`).join(';');\n\n  const endpoint = new URL(`coordinates/transform/${coordinatesStr}.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n\n  if ('sourceCrs' in options) {\n    endpoint.searchParams.set('s_srs', options.sourceCrs.toString());\n  }\n\n  if ('targetCrs' in options) {\n    endpoint.searchParams.set('t_srs', options.targetCrs.toString());\n  }\n\n  if ('operations' in options) {\n    endpoint.searchParams.set('ops', (Array.isArray(options.operations) ? options.operations : [options.operations]).join('|'));\n  }\n\n  const urlWithParams = endpoint.toString()\n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\nconst coordinates = {\n  search,\n  transform,\n}\n\nexport default coordinates;","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport ServiceError from \"./ServiceError\";\n\n\nconst customMessages = {\n  403: 'Key is missing, invalid or restricted',\n}\n\n\n/**\n * Get user data and returns it as GeoJSON using the MapTiler API\n * @param dataId \n * @returns \n */\nasync function get(dataId: string) {\n  const endpoint = new URL(`data/${encodeURIComponent(dataId)}/features.json`, defaults.maptilerApiURL);\n  endpoint.searchParams.set('key', config.apiToken);\n  const urlWithParams = endpoint.toString()\n  \n  const res = await fetch(urlWithParams)\n\n  if (!res.ok) {\n    throw new ServiceError(res, res.status in customMessages ? customMessages[res.status] : '');\n  }\n\n  const obj = await res.json()\n  return obj;\n}\n\n\nconst data = {\n  get,\n}\n\nexport default data;","/**\\\n * This code is borrowed from https://github.com/mourner/simplify-js and reworked a little.\n */\n\nimport { lngLatArrayType } from \"./generalTypes\";\n\n// square distance from a point to a segment\nfunction getSqSegDist(p: lngLatArrayType, p1: lngLatArrayType, p2: lngLatArrayType): number {\n\n  let x = p1[0],\n      y = p1[1],\n      dx = p2[0] - x,\n      dy = p2[1] - y;\n\n  if (dx !== 0 || dy !== 0) {\n\n    let t = ((p[0] - x) * dx + (p[1] - y) * dy) / (dx * dx + dy * dy);\n\n    if (t > 1) {\n      x = p2[0];\n      y = p2[1];\n\n    } else if (t > 0) {\n      x += dx * t;\n      y += dy * t;\n    }\n  }\n\n  dx = p[0] - x;\n  dy = p[1] - y;\n\n  return dx * dx + dy * dy;\n}\n\n\nfunction simplifyDPStep(points: Array<lngLatArrayType>, first: number, last: number, sqTolerance: number, simplified: Array<lngLatArrayType>) {\n  let maxSqDist = sqTolerance, index;\n\n  for (let i = first + 1; i < last; i++) {\n    const sqDist = getSqSegDist(points[i], points[first], points[last]);\n\n    if (sqDist > maxSqDist) {\n      index = i;\n      maxSqDist = sqDist;\n    }\n  }\n\n  if (maxSqDist > sqTolerance) {\n    if (index - first > 1) {\n      simplifyDPStep(points, first, index, sqTolerance, simplified);\n    }\n    simplified.push(points[index]);\n    \n    if (last - index > 1) {\n      simplifyDPStep(points, index, last, sqTolerance, simplified);\n    }\n  }\n}\n\n\n// simplification using Ramer-Douglas-Peucker algorithm\nfunction simplifyDouglasPeucker(points: Array<lngLatArrayType>, sqTolerance: number): Array<lngLatArrayType> {\n  const last = points.length - 1;\n  const simplified = [points[0]];\n  simplifyDPStep(points, 0, last, sqTolerance, simplified);\n  simplified.push(points[last]);\n  return simplified;\n}\n\n\n// both algorithms combined for awesome performance\nexport default function simplify(points: Array<lngLatArrayType>, tolerance: number): Array<lngLatArrayType> {\n  if (points.length <= 2) {\n    return points;\n  }\n\n  const sqTolerance = tolerance !== undefined ? tolerance * tolerance : 1;\n  const simplePoints = simplifyDouglasPeucker(points, sqTolerance);\n  return simplePoints;\n}","import { config } from \"../config\";\nimport defaults from \"../defaults\";\nimport { bboxType, lngLatArrayType, lngLatType } from \"../generalTypes\";\nimport simplify from \"../simplify\";\n\n\nexport type centeredStaticMapOptionsType = {\n  style?: string,\n  hiDPI?: boolean,\n  format?: 'png' | 'jpg' | 'webp',\n  width?: number,\n  height?: number,\n  attribution?: 'bottomright' | 'bottomleft' | 'topleft' | 'topright' | false,\n  marker?: staticMapMarkerType | Array<staticMapMarkerType>,\n  markerIcon?: string,\n  markerAnchor?: 'top' | 'left' | 'bottom' | 'right' | 'center' | 'topleft' | 'bottomleft' | 'topright' | 'bottomright',\n  markerScale?: number,\n  path?: Array<lngLatArrayType>,\n  pathStrokeColor?: string,\n  pathFillColor?: string,\n  pathWidth?: number,\n}\n\nexport type boundedStaticMapOptionsType = {\n  style?: string,\n  hiDPI?: boolean,\n  format?: 'png' | 'jpg' | 'webp',\n  width?: number,\n  height?: number,\n  attribution?: 'bottomright' | 'bottomleft' | 'topleft' | 'topright' | false,\n  marker?: staticMapMarkerType | Array<staticMapMarkerType>,\n  markerIcon?: string,\n  markerAnchor?: 'top' | 'left' | 'bottom' | 'right' | 'center' | 'topleft' | 'bottomleft' | 'topright' | 'bottomright',\n  markerScale?: number,\n  path?: Array<lngLatArrayType>,\n  pathStrokeColor?: string,\n  pathFillColor?: string,\n  pathWidth?: number,\n  padding?: number,\n}\n\nexport type automaticStaticMapOptionsType = boundedStaticMapOptionsType;\n\n\nexport type staticMapMarkerType = {\n  lng: number,\n  lat: number,\n  color?: string,\n}\n\n\nfunction staticMapMarkerToString(marker: staticMapMarkerType, includeColor:boolean = true) {\n  let str = `${marker.lng},${marker.lat}`;\n\n  if (marker.color && includeColor) {\n    str += `,${marker.color}`;\n  }\n\n  return str;\n}\n\n\nfunction simplifyAndStringify(path: Array<lngLatArrayType>, maxNbChar: number = 3000): string {  \n  let str = path.map(point => point.join(',')).join('|');\n  let tolerance = 0.000005;\n  const toleranceStep = 0.00001;\n\n  while(str.length > maxNbChar) {\n    const simplerPath = simplify(path, tolerance);\n    // str = simplerPath.map(point => point.join(',')).join('|');\n    str = simplerPath.map(point => `${point[0]},${point[1]}`).join('|');\n    tolerance += toleranceStep;\n  }\n\n  return str;\n}\n\n\n/**\n * Construct the URL for a static map centered on one point.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param center \n * @param zoom \n * @param options \n * @returns \n */\nfunction centered(center: lngLatType, zoom: number, options: centeredStaticMapOptionsType = {}): string {\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? '@2x' : '';\n  const format = options.format ?? 'png';\n  const width = ~~(options.width ?? 800);\n  const height = ~~(options.height ?? 600);\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/${center.lng},${center.lat},${zoom}/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  \n  if ('attribution' in options) {\n    endpoint.searchParams.set('attribution', options.attribution.toString());\n  }\n\n  if ('marker' in options) {\n\n    let markerStr = '';\n\n    const hasIcon = 'markerIcon' in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && 'markerAnchor' in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && 'markerScale' in options) {\n      markerStr += `scale:${Math.round(1/options.markerScale)}|`;\n    }\n\n    const markerList = Array.isArray(options.marker) ? options.marker : [options.marker];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join('|');\n    endpoint.searchParams.set('markers', markerStr);\n  }\n\n  if ('path' in options) {\n    let pathStr = '';\n\n    pathStr += `fill:${options.pathFillColor ?? 'none'}|`;\n\n    if ('pathStrokeColor' in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n\n    if ('pathWidth' in options) {\n      pathStr += `width:${options.pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set('path', pathStr);\n  }\n  \n  endpoint.searchParams.set('key', config.apiToken);\n\n  return endpoint.toString()\n}\n\n\n/**\n * Construct the URL for a static map using a bounding box\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param boundingBox \n * @param options \n * @returns \n */\nfunction bounded(boundingBox: bboxType, options: boundedStaticMapOptionsType = {}) {\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? '@2x' : '';\n  const format = options.format ?? 'png';\n  const width = ~~(options.width ?? 800);\n  const height = ~~(options.height ?? 600);\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/${boundingBox.southWest.lng},${boundingBox.southWest.lat},${boundingBox.northEast.lng},${boundingBox.northEast.lat}/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  \n  if ('attribution' in options) {\n    endpoint.searchParams.set('attribution', options.attribution.toString());\n  }\n\n  if ('padding' in options) {\n    endpoint.searchParams.set('padding', options.padding.toString());\n  }\n\n  if ('marker' in options) {\n\n    let markerStr = '';\n\n    const hasIcon = 'markerIcon' in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && 'markerAnchor' in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && 'markerScale' in options) {\n      markerStr += `scale:${Math.round(1/options.markerScale)}|`;\n    }\n\n    const markerList = Array.isArray(options.marker) ? options.marker : [options.marker];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join('|');\n    endpoint.searchParams.set('markers', markerStr);\n  }\n\n  if ('path' in options) {\n    let pathStr = '';\n\n    pathStr += `fill:${options.pathFillColor ?? 'none'}|`;\n\n    if ('pathStrokeColor' in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n\n    if ('pathWidth' in options) {\n      pathStr += `width:${options.pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set('path', pathStr);\n  }\n  \n  endpoint.searchParams.set('key', config.apiToken);\n\n  return endpoint.toString()\n}\n\n\n/**\n * Construct the URL for a static map automatically fitted around the provided path or markers.\n * Note: this function does not fetch the binary content of the image since\n * the purpose of a static map is generally to have its URL as a `src` property of a <img/> element.\n * @param options \n * @returns \n */\nfunction automatic(options: automaticStaticMapOptionsType = {}) {\n  if (!('marker' in options) && !('path' in options)) {\n    throw new Error('Automatic static maps require markers and/or path to be created.');\n  }\n\n  const style = options.style ?? defaults.mapStyle;\n  const scale = options.hiDPI ? '@2x' : '';\n  const format = options.format ?? 'png';\n  const width = ~~(options.width ?? 800);\n  const height = ~~(options.height ?? 600);\n  const endpoint = new URL(`maps/${encodeURIComponent(style)}/static/auto/${width}x${height}${scale}.${format}`, defaults.maptilerApiURL);\n  \n  if ('attribution' in options) {\n    endpoint.searchParams.set('attribution', options.attribution.toString());\n  }\n\n  if ('padding' in options) {\n    endpoint.searchParams.set('padding', options.padding.toString());\n  }\n\n  if ('marker' in options) {\n    let markerStr = '';\n\n    const hasIcon = 'markerIcon' in options;\n\n    if (hasIcon) {\n      markerStr += `icon:${options.markerIcon}|`;\n    }\n\n    if (hasIcon && 'markerAnchor' in options) {\n      markerStr += `anchor:${options.markerAnchor}|`;\n    }\n\n    if (hasIcon && 'markerScale' in options) {\n      markerStr += `scale:${Math.round(1/options.markerScale)}|`;\n    }\n\n    const markerList = Array.isArray(options.marker) ? options.marker : [options.marker];\n    markerStr += markerList.map(m => staticMapMarkerToString(m, !hasIcon)).join('|');\n    endpoint.searchParams.set('markers', markerStr);\n  }\n\n  if ('path' in options) {\n    let pathStr = '';\n\n    pathStr += `fill:${options.pathFillColor ?? 'none'}|`;\n\n    if ('pathStrokeColor' in options) {\n      pathStr += `stroke:${options.pathStrokeColor}|`;\n    }\n\n\n    if ('pathWidth' in options) {\n      pathStr += `width:${options.pathWidth.toString()}|`;\n    }\n\n    pathStr += simplifyAndStringify(options.path);\n    endpoint.searchParams.set('path', pathStr);\n  }\n  \n  endpoint.searchParams.set('key', config.apiToken);\n\n  return endpoint.toString()\n}\n\n\nconst staticMaps = {\n  centered,\n  bounded,\n  automatic,\n}\n\nexport default staticMaps;","const languages = {\n  \"AFAR\": \"aa\",\n  \"ABKHAZIAN\": \"ab\",\n  \"AVESTAN\": \"ae\",\n  \"AFRIKAANS\": \"af\",\n  \"AKAN\": \"ak\",\n  \"AMHARIC\": \"am\",\n  \"ARAGONESE\": \"an\",\n  \"ARABIC\": \"ar\",\n  \"ASSAMESE\": \"as\",\n  \"AVARIC\": \"av\",\n  \"AYMARA\": \"ay\",\n  \"AZERBAIJANI\": \"az\",\n  \"BASHKIR\": \"ba\",\n  \"BELARUSIAN\": \"be\",\n  \"BULGARIAN\": \"bg\",\n  \"BIHARI\": \"bh\",\n  \"BISLAMA\": \"bi\",\n  \"BAMBARA\": \"bm\",\n  \"BENGALI\": \"bn\",\n  \"TIBETAN\": \"bo\",\n  \"BRETON\": \"br\",\n  \"BOSNIAN\": \"bs\",\n  \"CATALAN\": \"ca\",\n  \"CHECHEN\": \"ce\",\n  \"CHAMORRO\": \"ch\",\n  \"CORSICAN\": \"co\",\n  \"CREE\": \"cr\",\n  \"CZECH\": \"cs\",\n  \"CHURCH_SLAVIC\": \"cu\",\n  \"CHUVASH\": \"cv\",\n  \"WELSH\": \"cy\",\n  \"DANISH\": \"da\",\n  \"GERMAN\": \"de\",\n  \"MALDIVIAN\": \"dv\",\n  \"DZONGKHA\": \"dz\",\n  \"EWE\": \"ee\",\n  \"GREEK\": \"el\",\n  \"ENGLISH\": \"en\",\n  \"ESPERANTO\": \"eo\",\n  \"SPANISH\": \"es\",\n  \"ESTONIAN\": \"et\",\n  \"BASQUE\": \"eu\",\n  \"PERSIAN\": \"fa\",\n  \"FULAH\": \"ff\",\n  \"FINNISH\": \"fi\",\n  \"FIJIAN\": \"fj\",\n  \"FAROESE\": \"fo\",\n  \"FRENCH\": \"fr\",\n  \"WESTERN_FRISIAN\": \"fy\",\n  \"IRISH\": \"ga\",\n  \"GAELIC\": \"gd\",\n  \"GALICIAN\": \"gl\",\n  \"GUARANI\": \"gn\",\n  \"GUJARATI\": \"gu\",\n  \"MANX\": \"gv\",\n  \"HAUSA\": \"ha\",\n  \"HEBREW\": \"he\",\n  \"HINDI\": \"hi\",\n  \"HIRI_MOTU\": \"ho\",\n  \"CROATIAN\": \"hr\",\n  \"HAITIAN\": \"ht\",\n  \"HUNGARIAN\": \"hu\",\n  \"ARMENIAN\": \"hy\",\n  \"HERERO\": \"hz\",\n  \"INTERLINGUA\": \"ia\",\n  \"INDONESIAN\": \"id\",\n  \"INTERLINGUE\": \"ie\",\n  \"IGBO\": \"ig\",\n  \"SICHUAN YI\": \"ii\",\n  \"INUPIAQ\": \"ik\",\n  \"IDO\": \"io\",\n  \"ICELANDIC\": \"is\",\n  \"ITALIAN\": \"it\",\n  \"INUKTITUT\": \"iu\",\n  \"JAPANESE\": \"ja\",\n  \"JAVANESE\": \"jv\",\n  \"GEORGIAN\": \"ka\",\n  \"KONGO\": \"kg\",\n  \"KIKUYU\": \"ki\",\n  \"KUANYAMA\": \"kj\",\n  \"KAZAKH\": \"kk\",\n  \"KALAALLISUT\": \"kl\",\n  \"CENTRAL KHMER\": \"km\",\n  \"KANNADA\": \"kn\",\n  \"KOREAN\": \"ko\",\n  \"KANURI\": \"kr\",\n  \"KASHMIRI\": \"ks\",\n  \"KURDISH\": \"ku\",\n  \"KOMI\": \"kv\",\n  \"CORNISH\": \"kw\",\n  \"KIRGHIZ\": \"ky\",\n  \"LUXEMBOURGISH\": \"lb\",\n  \"GANDA\": \"lg\",\n  \"LIMBURGAN\": \"li\",\n  \"LINGALA\": \"ln\",\n  \"LAO\": \"lo\",\n  \"LITHUANIAN\": \"lt\",\n  \"LUBA-KATANGA\": \"lu\",\n  \"LATVIAN\": \"lv\",\n  \"MALAGASY\": \"mg\",\n  \"MARSHALLESE\": \"mh\",\n  \"MAORI\": \"mi\",\n  \"MACEDONIAN\": \"mk\",\n  \"MALAYALAM\": \"ml\",\n  \"MONGOLIAN\": \"mn\",\n  \"MARATHI\": \"mr\",\n  \"MALAY\": \"ms\",\n  \"MALTESE\": \"mt\",\n  \"BURMESE\": \"my\",\n  \"NAURU\": \"na\",\n  \"NORWEGIAN\": \"no\",\n  \"NORTH NDEBELE\": \"nd\",\n  \"NEPALI\": \"ne\",\n  \"NDONGA\": \"ng\",\n  \"DUTCH\": \"nl\",\n  \"SOUTH_NDEBELE\": \"nr\",\n  \"NAVAJO\": \"nv\",\n  \"CHICHEWA\": \"ny\",\n  \"OCCITAN\": \"oc\",\n  \"OJIBWA\": \"oj\",\n  \"OROMO\": \"om\",\n  \"ORIYA\": \"or\",\n  \"OSSETIC\": \"os\",\n  \"PANJABI\": \"pa\",\n  \"PALI\": \"pi\",\n  \"POLISH\": \"pl\",\n  \"PUSHTO\": \"ps\",\n  \"PORTUGUESE\": \"pt\",\n  \"QUECHUA\": \"qu\",\n  \"ROMANSH\": \"rm\",\n  \"RUNDI\": \"rn\",\n  \"ROMANIAN\": \"ro\",\n  \"RUSSIAN\": \"ru\",\n  \"KINYARWANDA\": \"rw\",\n  \"SANSKRIT\": \"sa\",\n  \"SARDINIAN\": \"sc\",\n  \"SINDHI\": \"sd\",\n  \"NORTHERN SAMI\": \"se\",\n  \"SANGO\": \"sg\",\n  \"SINHALA\": \"si\",\n  \"SLOVAK\": \"sk\",\n  \"SLOVENIAN\": \"sl\",\n  \"SAMOAN\": \"sm\",\n  \"SHONA\": \"sn\",\n  \"SOMALI\": \"so\",\n  \"ALBANIAN\": \"sq\",\n  \"SERBIAN\": \"sr\",\n  \"SWATI\": \"ss\",\n  \"SOTHO_SOUTHERN\": \"st\",\n  \"SUNDANESE\": \"su\",\n  \"SWEDISH\": \"sv\",\n  \"SWAHILI\": \"sw\",\n  \"TAMIL\": \"ta\",\n  \"TELUGU\": \"te\",\n  \"TAJIK\": \"tg\",\n  \"THAI\": \"th\",\n  \"TIGRINYA\": \"ti\",\n  \"TURKMEN\": \"tk\",\n  \"TAGALOG\": \"tl\",\n  \"TSWANA\": \"tn\",\n  \"TONGA\": \"to\",\n  \"TURKISH\": \"tr\",\n  \"TSONGA\": \"ts\",\n  \"TATAR\": \"tt\",\n  \"TWI\": \"tw\",\n  \"TAHITIAN\": \"ty\",\n  \"UIGHUR\": \"ug\",\n  \"UKRAINIAN\": \"uk\",\n  \"URDU\": \"ur\",\n  \"UZBEK\": \"uz\",\n  \"VENDA\": \"ve\",\n  \"VIETNAMESE\": \"vi\",\n  \"VOLAPUK\": \"vo\",\n  \"WALLOON\": \"wa\",\n  \"WOLOF\": \"wo\",\n  \"XHOSA\": \"xh\",\n  \"YIDDISH\": \"yi\",\n  \"YORUBA\": \"yo\",\n  \"ZHUANG\": \"za\",\n  \"CHINESE\": \"zh\",\n  \"ZULU\": \"zu\",\n  \"LATIN\": \"latin\",\n  \"NON_LATIN\": \"nonlatin\",\n}\n\nObject.freeze(languages);\n\nexport default languages; "],"names":["__async","customMessages","coordinates"],"mappings":"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"}